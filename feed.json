{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "http-request-mock",
  "home_page_url": "https://huturen.github.io/http-request-mock-docs/",
  "feed_url": "https://huturen.github.io/http-request-mock-docs/feed.json",
  "description": "http-request-mock: A new way to speed up your development and testing.",
  "items": [
    {
      "title": "API",
      "url": "https://huturen.github.io/http-request-mock-docs/api/",
      "id": "https://huturen.github.io/http-request-mock-docs/api/",
      "content_html": "<h2 id=\"for-httprequestmock\"> For HttpRequestMock</h2>\n<h3 id=\"setup-mocker\"> setup() : Mocker:</h3>\n<p>Auto detect request environment and set up request mock.</p>\n<h3 id=\"setupforwx-mocker\"> setupForWx() : Mocker:</h3>\n<p>Set up request mock for wx.request.</p>\n<h3 id=\"setupforxhr-mocker\"> setupForXhr() : Mocker:</h3>\n<p>Set up request mock for XMLHttpRequest.</p>\n<h3 id=\"setupforfetch-mocker\"> setupForFetch() : Mocker:</h3>\n<p>Set up request mock for fetch.</p>\n<h3 id=\"setupfornode-mocker\"> setupForNode() : Mocker:</h3>\n<p>Set up request mock for http.get, https.get, http.request and https.request in nodejs environment.</p>\n<h3 id=\"setupforunittest-type-wx-xhr-fetch-node-all-mocker\"> setupForUnitTest(type: 'wx' | 'xhr' | 'fetch' | 'node' | 'all') : Mocker:</h3>\n<p>Set up request mock for unit test.</p>\n<h3 id=\"enable-mocker\"> enable() : Mocker:</h3>\n<p>Enable mock function temporarily.</p>\n<h3 id=\"disable-mocker\"> disable() : Mocker:</h3>\n<p>Disable mock function temporarily.</p>\n<h3 id=\"enablelog-mocker\"> enableLog() : Mocker:</h3>\n<p>Enable verbose log.</p>\n<h3 id=\"disablelog-mocker\"> disableLog() : Mocker:</h3>\n<p>Disable verbose log.</p>\n<hr>\n<h2 id=\"for-mocker\"> For Mocker</h2>\n<h3 id=\"setmockdata-mockconfigdata-mockconfigdata\"> setMockData(mockConfigData: MockConfigData)</h3>\n<p>Set global mock data configuration.</p>\n<h3 id=\"reset\"> reset()</h3>\n<p>Reset global mock data configuration.</p>\n<h3 id=\"mock-mockitem-mockiteminfo\"> mock(mockItem: MockItemInfo)</h3>\n<p>Check specified mock item &amp; add it to global mock data configuration.</p>\n<div><pre><code><span>interface</span> <span>MockItemInfo</span> <span>{</span>\n  <span>url</span><span>:</span> RegExp <span>|</span> string<span>;</span>\n  method<span>?</span><span>:</span> HttpVerb<span>;</span> <span>// GET, POST, PUT, PATCH, DELETE or HEAD</span>\n  headers<span>?</span><span>:</span> Header<span>,</span> <span>// response header</span>\n  delay<span>?</span><span>:</span> number<span>;</span>\n  disable<span>?</span><span>:</span> Disable<span>;</span> <span>// yes or no</span>\n  times<span>?</span><span>:</span> number<span>;</span>\n  body<span>?</span><span>:</span> any<span>;</span> <span>// response body</span>\n  status<span>?</span><span>:</span> number<span>;</span> <span>// http status code</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><h3 id=\"get-url-regexp-string-body-any-opts-mockitemext\"> get(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP GET request.</p>\n<div><pre><code><span>interface</span> <span>MockItemExt</span> <span>{</span>\n  headers<span>?</span><span>:</span> Header<span>,</span> <span>// response headers</span>\n  disable<span>?</span><span>:</span> Disable<span>;</span> <span>// yes or no</span>\n  delay<span>?</span><span>:</span> number<span>;</span>\n  times<span>?</span><span>:</span> number<span>;</span>\n  status<span>?</span><span>:</span> number<span>;</span> <span>// http status code</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><h3 id=\"post-url-regexp-string-body-any-opts-mockitemext\"> post(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP POST request.</p>\n<h3 id=\"put-url-regexp-string-body-any-opts-mockitemext\"> put(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP PUT request.</p>\n<h3 id=\"patch-url-regexp-string-body-any-opts-mockitemext\"> patch(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP PATCH request.</p>\n<h3 id=\"delete-url-regexp-string-body-any-opts-mockitemext\"> delete(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP DELETE request.</p>\n<h3 id=\"head-url-regexp-string-opts-mockitemext\"> head(url: RegExp | String, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP HEAD request.</p>\n<h3 id=\"any-url-regexp-string-body-any-opts-mockitemext\"> any(url: RegExp | String, body: any, opts: MockItemExt)</h3>\n<p>Make a mock item that matches an HTTP GET, POST, PUT, PATCH, DELETE or HEAD  request.</p>\n<h3 id=\"matchmockitem-requrl-string-reqmethod-httpverb-undefined\"> matchMockItem(reqUrl: string, reqMethod: HttpVerb | undefined)</h3>\n<p>Check whether the specified request url matchs a defined mock item.</p>\n<p>If a match is found, return the matched mock item, otherwise a null is returned.</p>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Examples",
      "url": "https://huturen.github.io/http-request-mock-docs/examples/",
      "id": "https://huturen.github.io/http-request-mock-docs/examples/",
      "content_html": "<ul>\n<li>\n<p>Integration with webpack-dev-server:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-webpack-dev-server/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-integration-with-webpack-dev-server\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>Integration with vue by webpack plugin:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-vue-by-webpack-plugin/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-integration-with-vue-by-webpack-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>Integration with vue by webpack CLI:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-vue-by-cli/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-integration-with-vue-by-cli\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>Integration with react:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-react-by-cli/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-integration-with-react-by-cli\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>Integration with nodejs:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-nodejs/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-integration-with-nodejs\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>A CURD demo (http-request-mock + vite + vue3 + ES2015+ + TypeScript):\n<a href=\"https://huturen.github.io/http-request-mock-curd/#/dashboard\" target=\"_blank\" rel=\"noopener noreferrer\">Website</a>,\n<a href=\"https://github.com/huturen/http-request-mock-curd\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n<li>\n<p>Unit test:\n<a href=\"https://codesandbox.io/s/github/huturen/http-request-mock-unit-test/tree/main\" target=\"_blank\" rel=\"noopener noreferrer\">Codesandbox</a>,\n<a href=\"https://github.com/huturen/http-request-mock-unit-test\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n</li>\n</ul>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Bypass mocking",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/bypass/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/bypass/",
      "content_html": "<div><p>Tips</p>\n<p>A mock config item can be bypassed dynamically.</p>\n</div>\n<usage-interceptor />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://jsonplaceholder.typicode.com/photos/1\n * @method get\n */</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>requestInfo</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'request url:'</span><span>,</span> requestInfo<span>.</span>url<span>)</span><span>;</span>\n  <span>if</span> <span>(</span>requestInfo<span>.</span>query<span>.</span>p <span>===</span> <span>'1'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>this</span><span>.</span><span>bypass</span><span>(</span><span>)</span><span>;</span> <span>// do real network request</span>\n  <span>}</span>\n\n  <span>return</span> <span>{</span>\n    <span>\"albumId\"</span><span>:</span> <span>123</span><span>,</span>\n    <span>\"id\"</span><span>:</span> <span>456</span><span>,</span>\n    <span>\"title\"</span><span>:</span> <span>\"this is a fake item.\"</span><span>,</span>\n    <span>\"mock\"</span><span>:</span> <span>\"yes\"</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getResult(0)<span>\"</span></span><span>></span></span>Get https://jsonplaceholder.typicode.com/photos/1?p=0<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>=> use mock result.<span><span><span>&lt;/</span>span</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg[0] || '' }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span><span>></span></span><span title=\"&nbsp;\">&amp;nbsp;</span><span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span><span>></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getResult(1)<span>\"</span></span><span>></span></span>Get https://jsonplaceholder.typicode.com/photos/1?p=1<span><span><span>&lt;/</span>button</span><span>></span></span>\n      <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>=> bypass mocking and do real network request.<span><span><span>&lt;/</span>span</span><span>></span></span>\n      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg[1] || '' }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>{</span><span>0</span><span>:</span> <span>''</span><span>,</span> <span>1</span><span>:</span> <span>''</span><span>}</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>getResult</span><span>(</span><span>p</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/photos/1?p='</span><span>+</span>p<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg<span>[</span>p<span>]</span> <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg<span>[</span>p<span>]</span> <span>=</span> <span>'error: '</span> <span>+</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div><hr>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Cache",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/cache/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/cache/",
      "content_html": "<p><code>http-request-mock</code> supports the cache of data changes.</p>\n<feature-cache />\n<hr>\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://some.api.com/todo\n */</span>\n<span>const</span> <span>{</span> faker<span>,</span> cache <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>\n\n<span>const</span> data <span>=</span> <span>[</span><span>...</span><span>Array</span><span>(</span><span>5</span><span>)</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span>\n  <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> <span>'todos'</span><span>)</span><span>,</span>\n  <span>todo</span><span>:</span> faker<span>.</span><span>sentence</span><span>(</span><span>5</span><span>)</span><span>,</span>\n  <span>done</span><span>:</span> <span>true</span><span>,</span>\n<span>}</span><span>)</span><span>)</span><span>;</span>\n\n<span>// The [data] will be memoried by localStorage.</span>\n<span>// You can check it by localStorage.getItem('mock-todos').</span>\n<span>const</span> todos <span>=</span> <span>cache</span><span>(</span><span>'mock-todos'</span><span>,</span> data<span>)</span><span>;</span>\n\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>request</span><span>)</span> <span>=></span> <span>{</span>\n  <span>if</span> <span>(</span>request<span>.</span>query<span>.</span>action <span>===</span> <span>'add'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>add</span><span>(</span>request<span>.</span>query<span>)</span><span>;</span>\n  <span>}</span>\n  <span>if</span> <span>(</span>request<span>.</span>query<span>.</span>action <span>===</span> <span>'del'</span><span>)</span> <span>{</span>\n    <span>return</span> <span>del</span><span>(</span>request<span>.</span>query<span>)</span><span>;</span>\n  <span>}</span>\n  <span>return</span> todos<span>;</span>\n<span>}</span><span>;</span>\n\n<span>function</span> <span>add</span><span>(</span><span>query</span><span>)</span> <span>{</span>\n  todos<span>.</span><span>push</span><span>(</span><span>{</span>\n    <span>id</span><span>:</span> <span>(</span><span>(</span>todos<span>[</span>todos<span>.</span>length<span>-</span><span>1</span><span>]</span> <span>||</span> <span>{</span><span>}</span><span>)</span><span>.</span>id <span>||</span> <span>0</span><span>)</span> <span>+</span> <span>1</span><span>,</span>\n    <span>todo</span><span>:</span> query<span>.</span>todo<span>,</span>\n    <span>done</span><span>:</span> <span>false</span>\n  <span>}</span><span>)</span><span>;</span>\n  <span>return</span> <span>{</span> <span>code</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>del</span><span>(</span><span>query</span><span>)</span> <span>{</span>\n  <span>const</span> index <span>=</span> todos<span>.</span><span>findIndex</span><span>(</span><span>todo</span> <span>=></span> todo<span>.</span>id <span>===</span> <span>+</span>query<span>.</span>id<span>)</span><span>;</span>\n  todos<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>)</span><span>;</span>\n  <span>return</span> <span>{</span> <span>code</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span><span>;</span>\n<span>}</span>\n</code></pre>\n</div><h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span><span>></span></span>\n      Todo: <span><span><span>&lt;</span>input</span> <span>v-model.trim</span><span><span>=</span><span>\"</span>todo<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>text<span>\"</span></span> <span>maxlength</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>size</span><span><span>=</span><span>\"</span>30<span>\"</span></span> <span>/></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>add<span>\"</span></span><span>></span></span>Add<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n\n    <span><span><span>&lt;</span>table</span><span>></span></span>\n      <span><span><span>&lt;</span>tr</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>ID<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Todo<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Status<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Delete<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;/</span>tr</span><span>></span></span>\n      <span><span><span>&lt;</span>tr</span> <span>v-for</span><span><span>=</span><span>\"</span>item in todos<span>\"</span></span><span>></span></span>\n        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.id}}<span><span><span>&lt;/</span>td</span><span>></span></span>\n        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.todo}}<span><span><span>&lt;/</span>td</span><span>></span></span>\n        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.done ? 'Completed' : 'Pending'}}<span><span><span>&lt;/</span>td</span><span>></span></span>\n        <span><span><span>&lt;</span>td</span><span>></span></span><span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>del(item.id)<span>\"</span></span><span>></span></span>Delete<span><span><span>&lt;/</span>button</span><span>></span></span><span><span><span>&lt;/</span>td</span><span>></span></span>\n      <span><span><span>&lt;/</span>tr</span><span>></span></span>\n    <span><span><span>&lt;/</span>table</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n      <span>todo</span><span>:</span> <span>''</span><span>,</span>\n      <span>todos</span><span>:</span> <span>[</span><span>]</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>getList</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/todo'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>(</span><span>this</span><span>.</span>todos <span>=</span> res<span>.</span>data<span>)</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\n    <span>async</span> <span>add</span><span>(</span><span>)</span> <span>{</span>\n      <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>todo<span>)</span> <span>{</span>\n        <span>return</span> <span>alert</span><span>(</span><span>'please input a todo item.'</span><span>)</span><span>;</span>\n      <span>}</span>\n\n      <span>const</span> api <span>=</span> <span>'https://some.api.com/todo?action=add&amp;todo='</span><span>+</span><span>this</span><span>.</span>todo<span>;</span>\n\n      <span>await</span> axios<span>.</span><span>get</span><span>(</span>api<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>alert</span><span>(</span><span>'Result:'</span> <span>+</span> res<span>.</span>data<span>.</span>msg<span>)</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span>todo <span>=</span> <span>''</span><span>;</span>\n      <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\n    <span>async</span> <span>del</span><span>(</span><span>id</span><span>)</span> <span>{</span>\n      <span>const</span> sure <span>=</span> window<span>.</span><span>confirm</span><span>(</span><span>'Are you sure?'</span><span>)</span><span>;</span>\n      <span>if</span> <span>(</span><span>!</span>sure<span>)</span> <span>return</span><span>;</span>\n\n      <span>const</span> api <span>=</span> <span>'https://some.api.com/todo?action=del&amp;id='</span><span>+</span>id<span>;</span>\n\n      <span>await</span> axios<span>.</span><span>get</span><span>(</span>api<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>alert</span><span>(</span><span>'Result:'</span> <span>+</span> res<span>.</span>data<span>.</span>msg<span>)</span><span>)</span><span>;</span>\n      <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span><span>></span></span><span><span>\n\n</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Cross domain",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/cross/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/cross/",
      "content_html": "<p><code>http-request-mock</code> supports cross domain requests without any additional configurations.</p>\n<feature-cross />\n<hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>v-for</span><span><span>=</span><span>\"</span>(url, index) in urls<span>\"</span></span><span>></span></span>\n      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get(index)<span>\"</span></span><span>></span></span>GET {{url}}<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>pre</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>pre</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>\n\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span>\n      <span>urls</span><span>:</span> <span>[</span>\n        <span>'https://www.api.com/cross'</span><span>,</span>\n        <span>'https://some.api.com/cross'</span><span>,</span>\n        <span>'http://some.abc.com:8899/cross'</span><span>,</span>\n        <span>'http://xyz.123.org/cross'</span><span>,</span>\n        <span>'https://www.example.com/cross'</span><span>,</span>\n        <span>'http://other.domain.com/cross'</span><span>,</span>\n      <span>]</span><span>,</span>\n      <span>msg</span><span>:</span> <span>''</span><span>,</span>\n    <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>\n    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>\n    <span>this</span><span>.</span>urls<span>.</span><span>forEach</span><span>(</span><span>url</span> <span>=></span> <span>{</span>\n      mocker<span>.</span><span>get</span><span>(</span>url<span>,</span> <span><span>`</span><span>Requested </span><span><span>${</span>url<span>}</span></span><span> at: </span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toLocaleString</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span><span>)</span><span>;</span>\n    <span>}</span><span>)</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span>index<span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>this</span><span>.</span>urls<span>[</span>index<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Delaying response",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/delay/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/delay/",
      "content_html": "<feature-delay />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/delay\n * @method get\n * @delay 600\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>'delay mocking'</span><span>;</span>\n</code></pre>\n</div><hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/delay<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>\n      <span>const</span> now <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/delay'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>'spent: '</span> <span>+</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> now<span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Disable mocking",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/disable/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/disable/",
      "content_html": "<feature-disable />\n<hr>\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://jsonplaceholder.typicode.com/albums/1\n * @method get\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>userId</span><span>:</span> <span>1</span><span>,</span>\n  <span>id</span><span>:</span> <span>1</span><span>,</span>\n  <span>title</span><span>:</span> <span>'Mock Data'</span>\n<span>}</span>\n\n</code></pre>\n</div><h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://jsonplaceholder.typicode.com/albums/1<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>span</span><span>></span></span>Status: <span><span><span>&lt;</span>b</span><span>></span></span>{{ mockItem.disable === 'YES' ? 'Disabled' : 'Enabled' }}<span><span><span>&lt;/</span>b</span><span>></span></span><span><span><span>&lt;/</span>span</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>toggle<span>\"</span></span><span>></span></span>\n      {{ mockItem.disable === 'NO' ? 'Disable' : 'Enable' }} it\n    <span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span><span>,</span> <span>mockItem</span><span>:</span> <span>{</span><span>}</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>\n    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>\n    <span>this</span><span>.</span>mockItem <span>=</span> mocker<span>.</span><span>matchMockItem</span><span>(</span><span>'https://jsonplaceholder.typicode.com/albums/1'</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/albums/1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span>\n    <span>}</span><span>,</span>\n    <span>toggle</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>mockItem<span>.</span>disable <span>=</span> <span>this</span><span>.</span>mockItem<span>.</span>disable <span>===</span> <span>'NO'</span> <span>?</span> <span>'YES'</span> <span>:</span> <span>'NO'</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Dynamic response",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/dynamic/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/dynamic/",
      "content_html": "<p>You can export a function instead of an object to resolve a dynamic response,\nso as to simulate a complex business logic in the real world.</p>\n<feature-dynamic />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/dynamic-response\n * @method get\n */</span>\n<span>let</span> times <span>=</span> <span>0</span><span>;</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>requestInfo</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> <span>{</span> url<span>,</span> query <span>}</span> <span>=</span> requestInfo<span>;</span>\n  <span>return</span> <span>{</span> <span>times</span><span>:</span> <span>'times: '</span> <span>+</span> <span>(</span><span>++</span>times<span>)</span><span>,</span> url<span>,</span> query <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/dynamic-response<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>index</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/dynamic-response?i='</span> <span>+</span> <span>(</span><span>++</span><span>this</span><span>.</span>index<span>)</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div><h2 id=\"request-information\"> Request information</h2>\n<div><pre><code><span>export</span> <span>interface</span> <span>RequestInfo</span> <span>{</span>\n  <span>url</span><span>:</span> string<span>;</span>\n  <span>method</span><span>:</span> HttpVerb<span>;</span>\n  <span>query</span><span>:</span> object<span>;</span> <span>// url search query</span>\n  headers<span>?</span><span>:</span> object<span>;</span> <span>// request header</span>\n  body<span>?</span><span>:</span> any<span>;</span> <span>// post body</span>\n<span>}</span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Fake data",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/faker/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/faker/",
      "content_html": "<p><code>http-request-mock</code> has integrated with <a href=\"https://github.com/ngneat/falso\" target=\"_blank\" rel=\"noopener noreferrer\">@ngneat/falso</a>.</p>\n<p>You can use it to generate massive amounts of fake data.</p>\n<feature-faker />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/faker\n * @method any\n */</span>\n<span>const</span> <span>{</span> faker <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>{</span>\n    <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>)</span><span>,</span>\n    <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>\n    <span>age</span><span>:</span> <span>10</span> <span>+</span> faker<span>.</span><span>rand</span><span>(</span><span>0</span><span>,</span> <span>90</span><span>)</span><span>,</span>\n    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>'(###) ###-####'</span><span>)</span><span>,</span>\n    <span>gender</span><span>:</span> faker<span>.</span><span>gender</span><span>(</span><span>)</span><span>,</span>\n    <span>avatar</span><span>:</span> faker<span>.</span><span>avatar</span><span>(</span><span>)</span><span>,</span>\n  <span>}</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/faker<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>pre</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>pre</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/faker'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>,</span> <span>null</span><span>,</span> <span>4</span><span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Response headers",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/headers/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/headers/",
      "content_html": "<feature-headers />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/headers\n * @method get\n * @header application: application/json\n * @header abc: 123\n * @header xyz: aaa\n * @header xyz: bbb\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>'response headers mocking'</span><span>;</span>\n</code></pre>\n</div><hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/headers<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>PHit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/headers'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>headers<span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Logs",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/logs/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/logs/",
      "content_html": "<h2 id=\"default-logs\"> Default logs</h2>\n<p>By default, in a non-nodejs-enviroment, <code>http-request-mock</code> will print some necessary\nlogs if a request is matched with a mock config item. The logs contain request information\n, response information and the matched mock item.</p>\n<p><img src=\"/http-request-mock-docs/imgs/logs.png\" alt=\"logs\" /></p>\n<h2 id=\"editable\"> Editable</h2>\n<p>You can even edit the mock config dynamically with this logs.</p>\n<p><img src=\"/http-request-mock-docs/imgs/debug-logs.gif\" alt=\"logs\" /></p>\n<h2 id=\"disable\"> Disable</h2>\n<p>The logs feature can be disabled.</p>\n<div><pre><code><span>import</span> HttpRequetMock <span>from</span> <span>'http-request-mock'</span><span>;</span>\nHttpRequetMock<span>.</span><span>disableLog</span><span>(</span><span>)</span><span>;</span>\n</code></pre>\n</div>",
      "image": "https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/logs.png",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Probobuf",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/proto/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/proto/",
      "content_html": "<h2 id=\"support-for-generating-mock-data-by-proto-files\"> Support for generating mock data by proto files.</h2>\n<ol>\n<li>\n<p>When the <code>npx http-request-mock-cli --proto</code> command is executed for\nthe first time, a <code>.protorc.js</code> configuration file will be generated in\nthe mock directory.</p>\n</li>\n<li>\n<p>You can set [protoEntry] option in the file below and run the command again.</p>\n</li>\n<li>\n<p>When the <code>npx http-request-mock-cli --proto</code> command is executed for\nthe second time, the relevant mock files will be generated.</p>\n</li>\n</ol>\n<h2 id=\"protorc-js-file\"> .protorc.js file</h2>\n<div><pre><code><span>const</span> faker <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/faker.js'</span><span>)</span><span>.</span>shadow<span>;</span>\n<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>overwrite</span><span>:</span> <span>true</span><span>,</span>\n\n  <span>apiPrefix</span><span>:</span> <span>''</span><span>,</span>\n\n  <span>// The proto entry file. Absolute path.</span>\n  <span>protoEntry</span><span>:</span> <span>'/some/path/to/your/proto/files.proto'</span><span>,</span>\n\n  <span>// A list of search paths that are absolute for imported .proto files.</span>\n  <span>protoPaths</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n\n\n  <span>// Generate mock files that match specified methods, such as: ['getUser', /^getUser.*/].</span>\n  <span>// Note: this option is exclusive with `exclude_methods`.</span>\n  <span>includeMethods</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n\n  <span>// Skip methods that match specified items, such as: ['getUser', /^getUser.*/].</span>\n  <span>// Note: this option is exclusive with `include_methods`.</span>\n  <span>excludeMethods</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n\n  <span>// Whether or not to generate proto request fields, default to false.</span>\n  <span>generateProtoRequestFields</span><span>:</span> <span>false</span><span>,</span>\n\n  <span>// The default length of a repeated field</span>\n  <span>repeatedLength</span><span>:</span> <span>(</span><span>)</span> <span>=></span> faker<span>.</span><span>rand</span><span>(</span><span>2</span><span>,</span> <span>5</span><span>)</span><span>,</span>\n\n  <span>// Set global default values for specified types</span>\n  <span>globalTypes</span><span>:</span> <span>{</span>\n    <span>int32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>1</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>int64</span><span>:</span> <span>'faker.integer(1, 10000).toString()'</span><span>,</span>\n    <span>string</span><span>:</span> faker<span>.</span><span>string</span><span>(</span><span>5</span><span>,</span> <span>12</span><span>)</span><span>,</span>\n    <span>bool</span><span>:</span> faker<span>.</span><span>bool</span><span>(</span><span>)</span><span>,</span>\n    <span>double</span><span>:</span> faker<span>.</span><span>float</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>,</span> <span>2</span><span>)</span><span>,</span>\n    <span>float</span><span>:</span> faker<span>.</span><span>float</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>,</span> <span>2</span><span>)</span><span>,</span>\n    <span>uint32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>uint64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>sint32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>sint64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>fixed32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>fixed64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>sfixed32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>sfixed64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n    <span>bytes</span><span>:</span> faker<span>.</span><span>bytes</span><span>(</span><span>)</span><span>,</span>\n  <span>}</span><span>,</span>\n\n  <span>// Set global default values for specified fields.</span>\n  <span>globalFields</span><span>:</span> <span>{</span>\n    <span>code</span><span>:</span> <span>0</span><span>,</span>\n    <span>msg</span><span>:</span> <span>'ok'</span><span>,</span>\n    <span>id</span><span>:</span> <span>(</span><span>messageType</span><span>)</span> <span>=></span> <span>{</span>\n      <span>return</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> messageType<span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n    <span>title</span><span>:</span> faker<span>.</span><span>text</span><span>(</span><span>)</span><span>,</span>\n    <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>\n    <span>url</span><span>:</span> faker<span>.</span><span>url</span><span>(</span><span>)</span><span>,</span>\n    <span>email</span><span>:</span> faker<span>.</span><span>email</span><span>(</span><span>)</span><span>,</span>\n    <span>avatar</span><span>:</span> faker<span>.</span><span>avatar</span><span>(</span><span>)</span><span>,</span>\n    <span>image</span><span>:</span> faker<span>.</span><span>image</span><span>(</span><span>)</span><span>,</span>\n    <span>datetime</span><span>:</span> faker<span>.</span><span>datetime</span><span>(</span><span>)</span><span>,</span>\n    <span>ip</span><span>:</span> faker<span>.</span><span>ip</span><span>(</span><span>)</span><span>,</span>\n    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>)</span><span>,</span>\n    <span>address</span><span>:</span> faker<span>.</span><span>address</span><span>(</span><span>)</span><span>,</span>\n    <span>guid</span><span>:</span> faker<span>.</span><span>guid</span><span>(</span><span>)</span><span>,</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><h2 id=\"proto-file\"> Proto file</h2>\n<div><pre><code>syntax = &quot;proto3&quot;;\npackage proto_messages;\n\nmessage Request {\n}\n\nmessage Record {\n  uint32 id    = 1;\n  string name  = 2;\n  uint32 age   = 3;\n  string email = 4;\n}\n\nmessage Result {\n  uint32 code = 1;\n  string msg  = 2;\n  Record data = 3;\n}\n\nservice Api {\n  rpc getResult (Request) returns (Result);\n}\n\n</code></pre>\n</div><h2 id=\"mock-data-file-which-is-generated-by-command\"> Mock data file which is generated by command</h2>\n<div><pre><code><span>/**\n * @url /getResult\n * @delay 10\n * @method any\n */</span>\n<span>/* eslint-disable */</span>\n<span>const</span> <span>{</span> faker <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>request</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>{</span>\n    <span>code</span><span>:</span> <span>0</span><span>,</span>\n    <span>msg</span><span>:</span> <span>\"ok\"</span><span>,</span>\n    <span>data</span><span>:</span> <span>{</span>\n      <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> <span>\"Record\"</span><span>)</span><span>,</span>\n      <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>\n      <span>age</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>\n      <span>email</span><span>:</span> faker<span>.</span><span>email</span><span>(</span><span>)</span><span>,</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Features",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/",
      "content_html": "<ul>\n<li><a href=\"/http-request-mock-docs/feature/static\">Static response</a></li>\n<li><a href=\"/http-request-mock-docs/feature/dynamic\">Dynamic response</a></li>\n<li><a href=\"/http-request-mock-docs/feature/status\">HTTP status</a></li>\n<li><a href=\"/http-request-mock-docs/feature/headers\">Response headers</a></li>\n<li><a href=\"/http-request-mock-docs/feature/delay\">Delaying response</a></li>\n<li><a href=\"/http-request-mock-docs/feature/times\">Limited number</a></li>\n<li><a href=\"/http-request-mock-docs/feature/disable\">Disable mocking</a></li>\n<li><a href=\"/http-request-mock-docs/feature/bypass\">Bypass mocking</a></li>\n<li><a href=\"/http-request-mock-docs/feature/faker\">Fake data</a></li>\n<li><a href=\"/http-request-mock-docs/feature/cross\">Cross domain</a></li>\n<li><a href=\"/http-request-mock-docs/feature/logs\">Logs</a></li>\n<li><a href=\"/http-request-mock-docs/feature/proto\">Proto</a></li>\n<li><a href=\"/http-request-mock-docs/feature/cache\">Cache</a></li>\n<li><a href=\"/http-request-mock-docs/feature/remote\">Remote mock data</a></li>\n</ul>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Remote mock data",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/remote/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/remote/",
      "content_html": "<p><code>http-request-mock</code> supports for using remote mock data.</p>\n<feature-remote />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<h4 id=\"support-for-using-remote-mock-data\"> Support for using remote mock data.</h4>\n<div><pre><code><span>/**\n * @url https://www.api.com/remote1\n *\n * In browser, the specified remote url must conform to the cross-domain specification.\n * @remote https://jsonplaceholder.typicode.com/todos/1\n *\n * You can set request headers for the specified remote request\n * Note: For browser, target server must confirm to Access-Control-Allow-Headers specification\n * @requestHeaders abc: xyz\n *\n * @method get\n */</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>remote</span> <span>=></span> remote<span>.</span>responseJson<span>;</span>\n</code></pre>\n</div><h4 id=\"you-can-dynamically-modify-the-data-returned-from-the-remote\"> You can dynamically modify the data returned from the remote.</h4>\n<div><pre><code><span>/**\n * @url https://www.api.com/remote2\n *\n * In browser, the specified remote url must conform to the cross-domain specification.\n * @remote https://jsonplaceholder.typicode.com/todos/1\n *\n * You can set request headers for the specified remote request\n * Note: For browser, target server must confirm to Access-Control-Allow-Headers specification\n * @requestHeaders abc: xyz\n *\n * @method get\n */</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>remote</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>{</span>\n    <span>code</span><span>:</span> <span>0</span><span>,</span>\n    <span>msg</span><span>:</span> <span>'OK'</span><span>,</span>\n    <span>data</span><span>:</span> remote<span>.</span>responseJson\n  <span>}</span>\n<span>}</span>\n</code></pre>\n</div><hr>\n<h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getRemote1<span>\"</span></span><span>></span></span>GET https://www.api.com/remote1<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span title=\"&nbsp;\">&amp;nbsp;</span><span title=\"&nbsp;\">&amp;nbsp;</span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getRemote2<span>\"</span></span><span>></span></span>GET https://www.api.com/remote2<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>getRemote1</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/remote1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\n    <span>getRemote2</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/remote2'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Static response",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/static/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/static/",
      "content_html": "<feature-static />\n<hr>\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/text-response\n * @method get\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>'&lt;html>mock response content&lt;/html>'</span>\n</code></pre>\n</div><div><pre><code><span>/**\n * @url https://www.api.com/json-response\n * @method post\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span> <span>ret</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span>\n</code></pre>\n</div><h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/text-response<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>post<span>\"</span></span><span>></span></span>POST https://www.api.com/json-response<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/text-response'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n\n    <span>post</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>post</span><span>(</span><span>'https://www.api.com/json-response'</span><span>,</span> <span>{</span><span>abc</span><span>:</span> <span>123</span><span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "HTTP status",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/status/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/status/",
      "content_html": "<feature-status />\n<hr>\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://www.api.com/status404\n * @method get\n * @status 404\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>'Not Found'</span>\n</code></pre>\n</div><h2 id=\"vue-code\"> Vue code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://www.api.com/status404<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/status404'</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span> <span>// Request failed with status code 404</span>\n      <span>}</span><span>)</span><span>;</span>\n    <span>}</span><span>,</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div><div><p>Note</p>\n<p><code>axios</code> will throw an error when meets a 404 response.</p>\n</div>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Limited number",
      "url": "https://huturen.github.io/http-request-mock-docs/feature/times/",
      "id": "https://huturen.github.io/http-request-mock-docs/feature/times/",
      "content_html": "<h2 id=\"limited-number-of-mocking\"> Limited number of mocking</h2>\n<div><p>Note</p>\n<p>The mock item defined in the mock data file below will be deactivated after <mark>2</mark> requests.</p>\n</div>\n<feature-times />\n<h2 id=\"mock-data-file\"> Mock data file</h2>\n<div><pre><code><span>/**\n * @url https://jsonplaceholder.typicode.com/todos/1\n * @method any\n * @times 2\n */</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span> <span>mock</span><span>:</span> <span>'some response data'</span> <span>}</span><span>;</span>\n</code></pre>\n</div><hr>\n<h2 id=\"business-code\"> Business code</h2>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>get<span>\"</span></span><span>></span></span>GET https://jsonplaceholder.typicode.com/todos/1<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>span</span><span>></span></span>Count: {{count}}<span><span><span>&lt;/</span>span</span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>reset<span>\"</span></span><span>></span></span>Reset<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span><span>,</span> <span>mockItem</span><span>:</span> <span>null</span><span>,</span> <span>count</span><span>:</span> <span>0</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>\n    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>\n    <span>this</span><span>.</span>mockItem <span>=</span> mocker<span>.</span><span>matchMockItem</span><span>(</span><span>'https://jsonplaceholder.typicode.com/todos/1'</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>get</span><span>(</span><span>)</span> <span>{</span>\n      <span>++</span><span>this</span><span>.</span>count<span>;</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/todos/1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span>\n    <span>}</span><span>,</span>\n    <span>reset</span><span>(</span><span>)</span> <span>{</span>\n      <span>this</span><span>.</span>count <span>=</span> <span>0</span><span>;</span>\n      <span>this</span><span>.</span>mockItem<span>.</span>times <span>=</span> <span>2</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Installation",
      "url": "https://huturen.github.io/http-request-mock-docs/install/",
      "id": "https://huturen.github.io/http-request-mock-docs/install/",
      "content_html": "<p>You can use <code>http-request-mock</code> to speed up your development and testing.</p>\n<p><strong>NPM</strong>:</p>\n<p><code>npm install --save-dev http-request-mock</code></p>\n<div><pre><code><span>// using ES6 modules</span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>\n\n<span>// using CommonJS modules</span>\n<span>const</span> HttpRequestMock <span>=</span> <span>require</span><span>(</span><span>'http-request-mock'</span><span>)</span><span>;</span>\n</code></pre>\n</div><p><strong>CDN</strong>:</p>\n<p>The UMD build is also available on <code>unpkg</code>:</p>\n<div><pre><code><span>&lt;!-- unpkg --></span>\n<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://unpkg.com/http-request-mock/http-request-mock.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n</code></pre>\n</div><p>You can find the library on window.HttpRequestMock.</p>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Introduction",
      "url": "https://huturen.github.io/http-request-mock-docs/intro/",
      "id": "https://huturen.github.io/http-request-mock-docs/intro/",
      "content_html": "<p>It mocks http requests issued by axios, jquery, superagent, node-fetch, got, (… you name it) by\nintercepting XMLHttpRequest, fetch, and nodejs native HTTP/HTTPS module requests at the low level.</p>\n<ol>\n<li>XMLHttpRequest <span></span></li>\n<li>fetch <span></span></li>\n<li>https.request, https.get (nodejs native https request) <span></span></li>\n<li>http.request, http.get (nodejs native http request) <span></span></li>\n<li>wx.request <span></span></li>\n</ol>\n<p>Because of the low-level interception, any 3th-party request libraries that\nbased on the above requests can also be supported, such as:</p>\n<p><code>axios</code>, <code>jquery</code>, <code>superagent</code>, <code>ky</code>, <code>node-fetch</code>, <code>got</code>, <code>request</code> ...</p>\n<p><img src=\"/http-request-mock-docs/imgs/layers-design.png\" alt=\"layers-design\" /></p>\n<p>It differs from the other mocking libraries in that it provides a webpack plugin and command line tool\nto separate mock data from your business code. It's a truly non-hacking mocking library. You never have\nto hack into your business code to mock something ever again after a one-time configuration.</p>\n",
      "image": "https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/layers-design.png",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Project home",
      "url": "https://huturen.github.io/http-request-mock-docs/",
      "id": "https://huturen.github.io/http-request-mock-docs/",
      "content_html": "<hr>\n<p>You can define your mock data like below:</p>\n<div><pre><code><span>/**\n * @url https://api.com/xyz\n * @method get\n * @header content-type: application/json\n * @header abc: xyz\n * @status 200\n * @delay 300\n */</span>\n<span>const</span> faker <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/faker.js'</span><span>)</span><span>;</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>req</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>{</span>\n    <span>url</span><span>:</span> req<span>.</span>url<span>,</span>\n    <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>)</span><span>,</span>\n    <span>enName</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>\n    <span>cnName</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>true</span><span>)</span><span>,</span>\n    <span>age</span><span>:</span> faker<span>.</span><span>rand</span><span>(</span><span>10</span><span>,</span> <span>40</span><span>)</span><span>,</span>\n    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>'(###) ###-####'</span><span>)</span><span>,</span>\n   <span>}</span><span>;</span>\n<span>}</span>\n</code></pre>\n</div><home-index />\n<p>Try to type the code below in the console to play with http-request-mock.</p>\n<div><pre><code>axios<span>.</span><span>get</span><span>(</span><span>'https://api.com/xyz?aaa=1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>.</span>data<span>)</span><span>)</span><span>;</span>\n\n<span>fetch</span><span>(</span><span>'https://api.com/xyz?bbb=1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> res<span>.</span><span>json</span><span>(</span><span>)</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span><span>;</span>\n</code></pre>\n</div><hr>\n<div><p>Introduction</p>\n<p>It mocks http requests issued by axios, jquery, superagent, node-fetch, got, (… you name it) by intercepting XMLHttpRequest, fetch, and nodejs native HTTP/HTTPS module requests at the low level.</p>\n</div>\n<div>\n<p><img src=\"/http-request-mock-docs/imgs/layers-design.png\" alt=\"Design\" /></p>\n</div>\n<p><em>Note: The demos in this site do not compatible with IE11 and below.</em></p>\n",
      "image": "https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/layers-design.png",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Bare-bones",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/bare-bones/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/bare-bones/",
      "content_html": "<p>In a bare-bones example, you just import <code>http-request-mock</code> into\nyour module entry(such as: src/index.js, components/abc.vue) and configure\nyour mock datas there. Take a Vue project as an example:</p>\n<hr>\n<usage-minimum />\n<hr>\n<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>\n  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>demo<span>\"</span></span><span>></span></span>\n    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>\"</span>getResult<span>\"</span></span><span>></span></span>Get https://some.api.com/some-path<span><span><span>&lt;/</span>button</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>result<span>\"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>\n    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>tips<span>\"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>\n  <span><span><span>&lt;/</span>div</span><span>></span></span>\n<span><span><span>&lt;/</span>template</span><span>></span></span>\n\n<span><span><span>&lt;</span>script</span><span>></span></span><span><span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>\n<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>export</span> <span>default</span> <span>{</span>\n  <span>data</span><span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>\n  <span>}</span><span>,</span>\n  <span>mounted</span><span>(</span><span>)</span> <span>{</span>\n    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span>\n    mocker<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/some-path'</span><span>,</span> <span>'&lt;div>some result&lt;/div>'</span><span>)</span><span>;</span>\n  <span>}</span><span>,</span>\n  <span>methods</span><span>:</span> <span>{</span>\n    <span>getResult</span><span>(</span><span>)</span> <span>{</span>\n      axios<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/some-path'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>\n      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>\n        <span>this</span><span>.</span>msg <span>=</span> <span>'error: '</span> <span>+</span> err<span>.</span>message<span>;</span>\n      <span>}</span><span>)</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>\"</span>./demo.css<span>\"</span></span><span>></span></span>\n</code></pre>\n</div><p>It may be ok in a small project, however, for a large web application,\nit may have lots of APIs to be mocked. You may need frequently change\nthe entry file when adding/deleting/updating a mock data. There will be\na day that you'll get a mess as the project grows.</p>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CLI",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/cli/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/cli/",
      "content_html": "<h2 id=\"command-line-tool-options\"> Command Line Tool Options</h2>\n<p><code>npx http-request-mock-cli -h</code>:</p>\n<div><pre><code>Usage: npx http-request-mock-cli [options]\n\nDescription: http-request-mock command line tool at version 1.6.3.\nGlossary: [.runtime.js] A runtime mock configuration entry file.\nExample:\n    npx http-request-mock-cli -i\n\nOptions:\n  -d, --directory [directory]        The mock directory relative to the working directory. (default: &quot;mock&quot;)\n  -e, --environment [variable-pair]  Enable mock function by environment variable for .runtime.js.\n                                     (default: &quot;NODE_ENV=development&quot;)\n  -i, --init                         Initialize some samples &amp; a .runtime.js in the mock directory.\n  -w, --watch [command]              Watch mock directory &amp; update .runtime.js. If the [command] is specified,\n                                     ths specified command will be executed together with watching.\n  -j, --inject &lt;app-entry-file&gt;      Inject .runtime.js into the specified entry relative to the working directory.\n  -t, --type [module-type]           The module type of .runtime.js.\n                                     Possible values are: es6(alias of ESM), cjs(alias of commonjs).\n                                     (default: &quot;cjs&quot;)\n  --index [index-entry]              Index entry, automatic detection by default.\n                                     Possible values are: src/index.js, http-request-mock.js and http-request-mock.esm.mjs.\n                                     [src/index.js] for commonJS\n                                     [http-request-mock.js] for UMD\n                                     [http-request-mock.pure.js] An alternative version without faker and cache plugins for UMD.\n                                     [http-request-mock.esm.mjs] for ESM\n                                     [http-request-mock.pure.esm.mjs] for ESM An alternative version without faker and cache plugins for ESM.\n\n  -p, --proxy [mode]                 Proxy mode. In proxy mode, http-request-mock will start\n                                     a proxy server which receives incoming requests on localhost.\n                                     The mock files will be run in a nodejs environment.\n                                     This feature is designed for browser, so do not use it in a nodjs project.\n                                     Note: proxy mode is still under experimental stage, only for experts.\n                                     [matched] All requests matched by @url will be proxied to a proxy server. (default: &quot;none&quot;)\n  --proto                            Generate mock files by proto files.\n  -h, --help                         output usage information\n</code></pre>\n</div>",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Integration",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/integration/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/integration/",
      "content_html": "<h2 id=\"integration\"> Integration</h2>\n<p>For a large web application, we provide a webpack plugin and command\ntool to integrate your project. In this way, the mock data file can be\nseparated from the entry to reduce the burden of managing mock\nconfiguration entry file.</p>\n<p><img src=\"/http-request-mock-docs/imgs/development.png\" alt=\"unit-test\" /></p>\n<h2 id=\"integration-by-webpack-plugin\"> Integration By Webpack plugin</h2>\n<p>You can set it up by the steps below:</p>\n<ol>\n<li>Run <code>npx http-request-mock-cli -i</code>. It'll initialize some samples in your mock directory.</li>\n<li>Configure <code>HttpRequestMockWebpackPlugin</code> in your webpack configurations, which looks like below.</li>\n</ol>\n<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>\n<span>// The webpack plugin will parse mock files under the mock directory and generate a mock</span>\n<span>// configuration entry file named `.runtime.js`, then inject it into the your application entry file.</span>\n<span>const</span> HttpRequestMockWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/webpack.js'</span><span>)</span><span>;</span>\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>// ...</span>\n  <span>plugins</span><span>:</span> <span>[</span>\n    <span>new</span> <span>HttpRequestMockWebpackPlugin</span><span>(</span>\n      <span>enable</span><span>:</span> process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'development'</span><span>,</span> <span>// activate/deactivate</span>\n      <span>entry</span><span>:</span> <span><span>/</span><span>src\\/main\\.js$</span><span>/</span></span><span>,</span> <span>// web application entry</span>\n      <span>dir</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'mock/'</span><span>)</span><span>,</span> <span>// mock directory</span>\n    <span>)</span><span>,</span>\n  <span>]</span>\n  <span>// ...</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><ol start=\"3\">\n<li>In your package.json, set a command named <code>mock-dev</code> to start a mock development:</li>\n</ol>\n<div><pre><code>  <span>\"scripts\"</span><span>:</span> <span>{</span>\n    <span>\"dev\"</span><span>:</span> <span>\"npm run start\"</span><span>,</span>\n    <span>\"mock-dev\"</span><span>:</span> <span>\"NODE_ENV=development npm run start\"</span>\n  <span>}</span><span>,</span>\n</code></pre>\n</div><p><strong>Webpack Plugin options</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Option</th>\n<th style=\"text-align:left\">Required</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>entry</strong></td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">Application entry file, must be a Regexp object</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>dir</strong></td>\n<td style=\"text-align:left\">yes</td>\n<td style=\"text-align:left\">Mock directory, must be an absulte path</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>enable</strong></td>\n<td style=\"text-align:left\">no</td>\n<td style=\"text-align:left\">Whether or not to enable this plugin, defaut: true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>watch</strong></td>\n<td style=\"text-align:left\">no</td>\n<td style=\"text-align:left\">A callback that is triggered when a mock data file is changed</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"integration-by-command-line-tool\"> Integration By Command Line Tool</h2>\n<p>An alternative way to integrate with your project is using CLI.\nYou can set it up by the steps below:</p>\n<ol>\n<li>Run <code>npx http-request-mock-cli -j src/xxx.js</code> to inject mock configuration file\ninto the specified entry which may look like below:</li>\n</ol>\n<div><pre><code><span>import</span> <span>'../mock/.runtime.js'</span>\n<span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>'vue'</span>\n<span>import</span> App <span>from</span> <span>'./App.vue'</span>\n<span>// ...</span>\n<span>createApp</span><span>(</span>App<span>)</span><span>.</span><span>mount</span><span>(</span><span>'#app'</span><span>)</span>\n</code></pre>\n</div><ol start=\"2\">\n<li>In your package.json, set a command named <code>mock-dev</code> to start a mock development:</li>\n</ol>\n<div><pre><code><span>\"scripts\"</span><span>:</span> <span>{</span>\n  <span>\"serve\"</span><span>:</span> <span>\"vue-cli-service serve\"</span><span>,</span>\n  <span>\"mock-dev\"</span><span>:</span> <span>\"http-request-mock-cli -w \\\"vue-cli-service serve\\\"\"</span><span>,</span>\n<span>}</span><span>,</span>\n</code></pre>\n</div><p>The command passed into <code>http-request-mock-cli -w</code> must be quoted with double quotes.</p>\n<p><em><strong>Note：</strong></em></p>\n<p>If <code>-e --enviroment</code> is not specified, mock function will be enabled by <code>NODE_ENV=development</code>.</p>\n<p>Or, you can specify another enviroment variable, such as: <code>-e MOCK=yes</code>.</p>\n",
      "image": "https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/development.png",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Mock data file",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/mock/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/mock/",
      "content_html": "<p>You can define your mock data file like below:</p>\n<div><pre><code><span>/**\n * Note: Only the first comments block will be parsed.\n *\n * The url to be mocked.\n * Both string and RegExp(which begins and ends with # or /) are supported.\n * RegExp example: #.*\\/getUserInfo.*#\n * @url https://jsonplaceholder.typicode.com/todos/1\n *\n * The request method to be mocked.\n * One of http verb method get, post, put, patch, delete, head.\n * Default: any\n * @method any\n *\n * Response http status to be mocked.\n * Default: 200\n * @status 200\n *\n * Request headers, only available for @remote tag\n * It can be set repeatedly.\n * @requestHeaders content-type: application/json\n *\n * Response http headers to be mocked.\n * It can be set repeatedly.\n * @headers content-type: application/json\n *\n * Simulate network latency in milliseconds.\n * Default: 0\n * @delay 100\n *\n * Limited number of mocking.\n * It'll do a real network request after specified number of mocking.\n * Default: Infinity\n * @times 5\n *\n * Whether or not to enable this mock item.\n * 'yes' for real network request, 'no' for mock request.\n * Default: no\n * @disable no\n *\n * Remote mock data.\n * In browser, the specified remote url must conform to the cross-domain specification.\n * @remote https://remote.api.com/some/mock/data\n */</span>\n<span>// Response body to be mocked.</span>\n<span>// It supports to export an object, function, async function, sting or any other types.</span>\n<span>// If a function is specified, the function accepts an argument with request information.</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>requestInfo</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> <span>'Your response data'</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre>\n</div><p>At tags(@url, @method, @status ...) in the comments above will be parsed by webpack plugin or cli.</p>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Usage",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/",
      "content_html": "<ul>\n<li><a href=\"/http-request-mock-docs/usage/start\">Start</a></li>\n<li><a href=\"/http-request-mock-docs/usage/minimum\">Bare-bones</a></li>\n<li><a href=\"/http-request-mock-docs/usage/cli\">CLI</a></li>\n<li><a href=\"/http-request-mock-docs/usage/webpack\">Webpack</a></li>\n<li><a href=\"/http-request-mock-docs/usage/interceptor\">Interceptor</a></li>\n<li><a href=\"/http-request-mock-docs/usage/test\">Unit test</a></li>\n<li><a href=\"/http-request-mock-docs/usage/mock\">Mock data file</a></li>\n</ul>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Start",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/start/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/start/",
      "content_html": "<p>To mock an http request, just call a <code>mock</code> method or http verb method(<code>get</code>,<code>post</code>,<code>put</code>,<code>patch</code>,<code>delete</code>).</p>\n<div><pre><code><span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>\n<span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>\n\nmocker<span>.</span><span>mock</span><span>(</span><span>{</span>\n  <span>url</span><span>:</span> <span>'https://www.api.com/some-api'</span> <span>// or RegExp: /.*\\/some-api$/</span>\n  <span>body</span><span>:</span> <span>'some response data'</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>// or using http verb method:</span>\nmocker<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/some-api'</span><span>,</span> <span>'some response data'</span><span>)</span><span>;</span>\n</code></pre>\n</div><p>Then, you can write your business code as normal:</p>\n<div><pre><code>axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/some-api'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span> <span>// some response data</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n</div><hr>\n",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Unit test",
      "url": "https://huturen.github.io/http-request-mock-docs/usage/test/",
      "id": "https://huturen.github.io/http-request-mock-docs/usage/test/",
      "content_html": "<p>This library comes with built-in unit test capability and can be used in jest and mocha envrioment.\nThe unit tests of this library are also based on itself.</p>\n<p>An example of jest：</p>\n<div><pre><code><span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>\n<span>import</span> xhrAdapter <span>from</span> <span>'axios/lib/adapters/xhr'</span><span>;</span>\n<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>\n\naxios<span>.</span>defaults<span>.</span>adapter <span>=</span> xhrAdapter<span>;</span>\n<span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setupForUnitTest</span><span>(</span><span>'xhr'</span><span>)</span><span>;</span>\n\nmocker<span>.</span><span>get</span><span>(</span><span>'https://your.api.com/path'</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>{</span> <span>abc</span><span>:</span> <span>123</span> <span>}</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n\n<span>it</span><span>(</span><span>'should match object`'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> res <span>=</span> <span>await</span> axios<span>.</span><span>get</span><span>(</span><span>'https://your.api.com/path'</span><span>)</span><span>;</span>\n  <span>expect</span><span>(</span>res<span>.</span>data<span>)</span><span>.</span><span>toMatchObject</span><span>(</span><span>{</span><span>abc</span><span>:</span> <span>123</span><span>}</span><span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n</div><p>For a <code>mocha</code> example, please refer to <a href=\"https://github.com/huturen/http-request-mock/blob/main/experiment/mocha.js\" target=\"_blank\" rel=\"noopener noreferrer\">experiment/mocha.js</a>.</p>\n<h2 id=\"design\"> Design</h2>\n<p><img src=\"/http-request-mock-docs/imgs/unittest.png\" alt=\"unit-test\" /></p>\n",
      "image": "https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/unittest.png",
      "date_published": "2023-02-12T06:40:05.000Z",
      "date_modified": "2023-02-12T06:40:05.000Z",
      "authors": [],
      "tags": []
    }
  ]
}
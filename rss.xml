<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://huturen.github.io/http-request-mock-docs/rss.xml" rel="self" type="application/rss+xml"/>
    <title>http-request-mock</title>
    <link>https://huturen.github.io/http-request-mock-docs/</link>
    <description>http-request-mock: A new way to speed up your development and testing.</description>
    <language>en-US</language>
    <pubDate>Sun, 12 Feb 2023 07:43:53 GMT</pubDate>
    <lastBuildDate>Sun, 12 Feb 2023 07:43:53 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <item>
      <title>API</title>
      <link>https://huturen.github.io/http-request-mock-docs/api/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/api/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">API</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="for-httprequestmock"> For HttpRequestMock</h2>
<h3 id="setup-mocker"> setup() : Mocker:</h3>
<p>Auto detect request environment and set up request mock.</p>
<h3 id="setupforwx-mocker"> setupForWx() : Mocker:</h3>
<p>Set up request mock for wx.request.</p>
<h3 id="setupforxhr-mocker"> setupForXhr() : Mocker:</h3>
<p>Set up request mock for XMLHttpRequest.</p>
<h3 id="setupforfetch-mocker"> setupForFetch() : Mocker:</h3>
<p>Set up request mock for fetch.</p>
<h3 id="setupfornode-mocker"> setupForNode() : Mocker:</h3>
<p>Set up request mock for http.get, https.get, http.request and https.request in nodejs environment.</p>
<h3 id="setupforunittest-type-wx-xhr-fetch-node-all-mocker"> setupForUnitTest(type: 'wx' | 'xhr' | 'fetch' | 'node' | 'all') : Mocker:</h3>
<p>Set up request mock for unit test.</p>
<h3 id="enable-mocker"> enable() : Mocker:</h3>
<p>Enable mock function temporarily.</p>
<h3 id="disable-mocker"> disable() : Mocker:</h3>
<p>Disable mock function temporarily.</p>
<h3 id="enablelog-mocker"> enableLog() : Mocker:</h3>
<p>Enable verbose log.</p>
<h3 id="disablelog-mocker"> disableLog() : Mocker:</h3>
<p>Disable verbose log.</p>
<hr>
<h2 id="for-mocker"> For Mocker</h2>
<h3 id="setmockdata-mockconfigdata-mockconfigdata"> setMockData(mockConfigData: MockConfigData)</h3>
<p>Set global mock data configuration.</p>
<h3 id="reset"> reset()</h3>
<p>Reset global mock data configuration.</p>
<h3 id="mock-mockitem-mockiteminfo"> mock(mockItem: MockItemInfo)</h3>
<p>Check specified mock item &amp; add it to global mock data configuration.</p>
<div><pre><code><span>interface</span> <span>MockItemInfo</span> <span>{</span>
  <span>url</span><span>:</span> RegExp <span>|</span> string<span>;</span>
  method<span>?</span><span>:</span> HttpVerb<span>;</span> <span>// GET, POST, PUT, PATCH, DELETE or HEAD</span>
  headers<span>?</span><span>:</span> Header<span>,</span> <span>// response header</span>
  delay<span>?</span><span>:</span> number<span>;</span>
  disable<span>?</span><span>:</span> Disable<span>;</span> <span>// yes or no</span>
  times<span>?</span><span>:</span> number<span>;</span>
  body<span>?</span><span>:</span> any<span>;</span> <span>// response body</span>
  status<span>?</span><span>:</span> number<span>;</span> <span>// http status code</span>
<span>}</span><span>;</span>
</code></pre>
</div><h3 id="get-url-regexp-string-body-any-opts-mockitemext"> get(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP GET request.</p>
<div><pre><code><span>interface</span> <span>MockItemExt</span> <span>{</span>
  headers<span>?</span><span>:</span> Header<span>,</span> <span>// response headers</span>
  disable<span>?</span><span>:</span> Disable<span>;</span> <span>// yes or no</span>
  delay<span>?</span><span>:</span> number<span>;</span>
  times<span>?</span><span>:</span> number<span>;</span>
  status<span>?</span><span>:</span> number<span>;</span> <span>// http status code</span>
<span>}</span><span>;</span>
</code></pre>
</div><h3 id="post-url-regexp-string-body-any-opts-mockitemext"> post(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP POST request.</p>
<h3 id="put-url-regexp-string-body-any-opts-mockitemext"> put(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP PUT request.</p>
<h3 id="patch-url-regexp-string-body-any-opts-mockitemext"> patch(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP PATCH request.</p>
<h3 id="delete-url-regexp-string-body-any-opts-mockitemext"> delete(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP DELETE request.</p>
<h3 id="head-url-regexp-string-opts-mockitemext"> head(url: RegExp | String, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP HEAD request.</p>
<h3 id="any-url-regexp-string-body-any-opts-mockitemext"> any(url: RegExp | String, body: any, opts: MockItemExt)</h3>
<p>Make a mock item that matches an HTTP GET, POST, PUT, PATCH, DELETE or HEAD  request.</p>
<h3 id="matchmockitem-requrl-string-reqmethod-httpverb-undefined"> matchMockItem(reqUrl: string, reqMethod: HttpVerb | undefined)</h3>
<p>Check whether the specified request url matchs a defined mock item.</p>
<p>If a match is found, return the matched mock item, otherwise a null is returned.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Examples</title>
      <link>https://huturen.github.io/http-request-mock-docs/examples/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/examples/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Examples</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>
<p>Integration with webpack-dev-server:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-webpack-dev-server/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-integration-with-webpack-dev-server" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>Integration with vue by webpack plugin:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-vue-by-webpack-plugin/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-integration-with-vue-by-webpack-plugin" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>Integration with vue by webpack CLI:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-vue-by-cli/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-integration-with-vue-by-cli" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>Integration with react:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-react-by-cli/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-integration-with-react-by-cli" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>Integration with nodejs:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-integration-with-nodejs/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-integration-with-nodejs" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>A CURD demo (http-request-mock + vite + vue3 + ES2015+ + TypeScript):
<a href="https://huturen.github.io/http-request-mock-curd/#/dashboard" target="_blank" rel="noopener noreferrer">Website</a>,
<a href="https://github.com/huturen/http-request-mock-curd" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
<li>
<p>Unit test:
<a href="https://codesandbox.io/s/github/huturen/http-request-mock-unit-test/tree/main" target="_blank" rel="noopener noreferrer">Codesandbox</a>,
<a href="https://github.com/huturen/http-request-mock-unit-test" target="_blank" rel="noopener noreferrer">Github</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Bypass mocking</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/bypass/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/bypass/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Bypass mocking</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<div><p>Tips</p>
<p>A mock config item can be bypassed dynamically.</p>
</div>
<usage-interceptor />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://jsonplaceholder.typicode.com/photos/1
 * @method get
 */</span>
module<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>requestInfo</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'request url:'</span><span>,</span> requestInfo<span>.</span>url<span>)</span><span>;</span>
  <span>if</span> <span>(</span>requestInfo<span>.</span>query<span>.</span>p <span>===</span> <span>'1'</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>bypass</span><span>(</span><span>)</span><span>;</span> <span>// do real network request</span>
  <span>}</span>

  <span>return</span> <span>{</span>
    <span>"albumId"</span><span>:</span> <span>123</span><span>,</span>
    <span>"id"</span><span>:</span> <span>456</span><span>,</span>
    <span>"title"</span><span>:</span> <span>"this is a fake item."</span><span>,</span>
    <span>"mock"</span><span>:</span> <span>"yes"</span>
  <span>}</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
</div><h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>
      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>getResult(0)<span>"</span></span><span>></span></span>Get https://jsonplaceholder.typicode.com/photos/1?p=0<span><span><span>&lt;/</span>button</span><span>></span></span>
      <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>=> use mock result.<span><span><span>&lt;/</span>span</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg[0] || '' }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span><span title="&nbsp;">&amp;nbsp;</span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>
      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>getResult(1)<span>"</span></span><span>></span></span>Get https://jsonplaceholder.typicode.com/photos/1?p=1<span><span><span>&lt;/</span>button</span><span>></span></span>
      <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>=> bypass mocking and do real network request.<span><span><span>&lt;/</span>span</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg[1] || '' }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>{</span><span>0</span><span>:</span> <span>''</span><span>,</span> <span>1</span><span>:</span> <span>''</span><span>}</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>getResult</span><span>(</span><span>p</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/photos/1?p='</span><span>+</span>p<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg<span>[</span>p<span>]</span> <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg<span>[</span>p<span>]</span> <span>=</span> <span>'error: '</span> <span>+</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div><hr>
]]></content:encoded>
    </item>
    <item>
      <title>Cache</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/cache/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/cache/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Cache</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>http-request-mock</code> supports the cache of data changes.</p>
<feature-cache />
<hr>
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://some.api.com/todo
 */</span>
<span>const</span> <span>{</span> faker<span>,</span> cache <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>

<span>const</span> data <span>=</span> <span>[</span><span>...</span><span>Array</span><span>(</span><span>5</span><span>)</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
  <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> <span>'todos'</span><span>)</span><span>,</span>
  <span>todo</span><span>:</span> faker<span>.</span><span>sentence</span><span>(</span><span>5</span><span>)</span><span>,</span>
  <span>done</span><span>:</span> <span>true</span><span>,</span>
<span>}</span><span>)</span><span>)</span><span>;</span>

<span>// The [data] will be memoried by localStorage.</span>
<span>// You can check it by localStorage.getItem('mock-todos').</span>
<span>const</span> todos <span>=</span> <span>cache</span><span>(</span><span>'mock-todos'</span><span>,</span> data<span>)</span><span>;</span>

module<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>request</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>request<span>.</span>query<span>.</span>action <span>===</span> <span>'add'</span><span>)</span> <span>{</span>
    <span>return</span> <span>add</span><span>(</span>request<span>.</span>query<span>)</span><span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span>request<span>.</span>query<span>.</span>action <span>===</span> <span>'del'</span><span>)</span> <span>{</span>
    <span>return</span> <span>del</span><span>(</span>request<span>.</span>query<span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> todos<span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>add</span><span>(</span><span>query</span><span>)</span> <span>{</span>
  todos<span>.</span><span>push</span><span>(</span><span>{</span>
    <span>id</span><span>:</span> <span>(</span><span>(</span>todos<span>[</span>todos<span>.</span>length<span>-</span><span>1</span><span>]</span> <span>||</span> <span>{</span><span>}</span><span>)</span><span>.</span>id <span>||</span> <span>0</span><span>)</span> <span>+</span> <span>1</span><span>,</span>
    <span>todo</span><span>:</span> query<span>.</span>todo<span>,</span>
    <span>done</span><span>:</span> <span>false</span>
  <span>}</span><span>)</span><span>;</span>
  <span>return</span> <span>{</span> <span>code</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span><span>;</span>
<span>}</span>

<span>function</span> <span>del</span><span>(</span><span>query</span><span>)</span> <span>{</span>
  <span>const</span> index <span>=</span> todos<span>.</span><span>findIndex</span><span>(</span><span>todo</span> <span>=></span> todo<span>.</span>id <span>===</span> <span>+</span>query<span>.</span>id<span>)</span><span>;</span>
  todos<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>)</span><span>;</span>
  <span>return</span> <span>{</span> <span>code</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span><span>;</span>
<span>}</span>
</code></pre>
</div><h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>
      Todo: <span><span><span>&lt;</span>input</span> <span>v-model.trim</span><span><span>=</span><span>"</span>todo<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>text<span>"</span></span> <span>maxlength</span><span><span>=</span><span>"</span>30<span>"</span></span> <span>size</span><span><span>=</span><span>"</span>30<span>"</span></span> <span>/></span></span>
      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>add<span>"</span></span><span>></span></span>Add<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>

    <span><span><span>&lt;</span>table</span><span>></span></span>
      <span><span><span>&lt;</span>tr</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>ID<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Todo<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Status<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;</span>th</span><span>></span></span>Delete<span><span><span>&lt;/</span>th</span><span>></span></span><span><span><span>&lt;/</span>tr</span><span>></span></span>
      <span><span><span>&lt;</span>tr</span> <span>v-for</span><span><span>=</span><span>"</span>item in todos<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.id}}<span><span><span>&lt;/</span>td</span><span>></span></span>
        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.todo}}<span><span><span>&lt;/</span>td</span><span>></span></span>
        <span><span><span>&lt;</span>td</span><span>></span></span>{{item.done ? 'Completed' : 'Pending'}}<span><span><span>&lt;/</span>td</span><span>></span></span>
        <span><span><span>&lt;</span>td</span><span>></span></span><span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>del(item.id)<span>"</span></span><span>></span></span>Delete<span><span><span>&lt;/</span>button</span><span>></span></span><span><span><span>&lt;/</span>td</span><span>></span></span>
      <span><span><span>&lt;/</span>tr</span><span>></span></span>
    <span><span><span>&lt;/</span>table</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>todo</span><span>:</span> <span>''</span><span>,</span>
      <span>todos</span><span>:</span> <span>[</span><span>]</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>mounted</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>getList</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/todo'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>(</span><span>this</span><span>.</span>todos <span>=</span> res<span>.</span>data<span>)</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>

    <span>async</span> <span>add</span><span>(</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>todo<span>)</span> <span>{</span>
        <span>return</span> <span>alert</span><span>(</span><span>'please input a todo item.'</span><span>)</span><span>;</span>
      <span>}</span>

      <span>const</span> api <span>=</span> <span>'https://some.api.com/todo?action=add&amp;todo='</span><span>+</span><span>this</span><span>.</span>todo<span>;</span>

      <span>await</span> axios<span>.</span><span>get</span><span>(</span>api<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>alert</span><span>(</span><span>'Result:'</span> <span>+</span> res<span>.</span>data<span>.</span>msg<span>)</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>todo <span>=</span> <span>''</span><span>;</span>
      <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>

    <span>async</span> <span>del</span><span>(</span><span>id</span><span>)</span> <span>{</span>
      <span>const</span> sure <span>=</span> window<span>.</span><span>confirm</span><span>(</span><span>'Are you sure?'</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span><span>!</span>sure<span>)</span> <span>return</span><span>;</span>

      <span>const</span> api <span>=</span> <span>'https://some.api.com/todo?action=del&amp;id='</span><span>+</span>id<span>;</span>

      <span>await</span> axios<span>.</span><span>get</span><span>(</span>api<span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>alert</span><span>(</span><span>'Result:'</span> <span>+</span> res<span>.</span>data<span>.</span>msg<span>)</span><span>)</span><span>;</span>
      <span>this</span><span>.</span><span>getList</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span><span>></span></span><span><span>

</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Cross domain</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/cross/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/cross/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Cross domain</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>http-request-mock</code> supports cross domain requests without any additional configurations.</p>
<feature-cross />
<hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>v-for</span><span><span>=</span><span>"</span>(url, index) in urls<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get(index)<span>"</span></span><span>></span></span>GET {{url}}<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>pre</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>pre</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>urls</span><span>:</span> <span>[</span>
        <span>'https://www.api.com/cross'</span><span>,</span>
        <span>'https://some.api.com/cross'</span><span>,</span>
        <span>'http://some.abc.com:8899/cross'</span><span>,</span>
        <span>'http://xyz.123.org/cross'</span><span>,</span>
        <span>'https://www.example.com/cross'</span><span>,</span>
        <span>'http://other.domain.com/cross'</span><span>,</span>
      <span>]</span><span>,</span>
      <span>msg</span><span>:</span> <span>''</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>
    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>urls<span>.</span><span>forEach</span><span>(</span><span>url</span> <span>=></span> <span>{</span>
      mocker<span>.</span><span>get</span><span>(</span>url<span>,</span> <span><span>`</span><span>Requested </span><span><span>${</span>url<span>}</span></span><span> at: </span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toLocaleString</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span>index<span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>this</span><span>.</span>urls<span>[</span>index<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Delaying response</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/delay/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/delay/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Delaying response</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<feature-delay />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/delay
 * @method get
 * @delay 600
 */</span>
module<span>.</span>exports <span>=</span> <span>'delay mocking'</span><span>;</span>
</code></pre>
</div><hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/delay<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>
      <span>const</span> now <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/delay'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>'spent: '</span> <span>+</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> now<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Disable mocking</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/disable/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/disable/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Disable mocking</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<feature-disable />
<hr>
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://jsonplaceholder.typicode.com/albums/1
 * @method get
 */</span>
module<span>.</span>exports <span>=</span> <span>{</span>
  <span>userId</span><span>:</span> <span>1</span><span>,</span>
  <span>id</span><span>:</span> <span>1</span><span>,</span>
  <span>title</span><span>:</span> <span>'Mock Data'</span>
<span>}</span>

</code></pre>
</div><h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://jsonplaceholder.typicode.com/albums/1<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>Status: <span><span><span>&lt;</span>b</span><span>></span></span>{{ mockItem.disable === 'YES' ? 'Disabled' : 'Enabled' }}<span><span><span>&lt;/</span>b</span><span>></span></span><span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>toggle<span>"</span></span><span>></span></span>
      {{ mockItem.disable === 'NO' ? 'Disable' : 'Enable' }} it
    <span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span><span>,</span> <span>mockItem</span><span>:</span> <span>{</span><span>}</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>
    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>mockItem <span>=</span> mocker<span>.</span><span>matchMockItem</span><span>(</span><span>'https://jsonplaceholder.typicode.com/albums/1'</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/albums/1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
    <span>toggle</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>mockItem<span>.</span>disable <span>=</span> <span>this</span><span>.</span>mockItem<span>.</span>disable <span>===</span> <span>'NO'</span> <span>?</span> <span>'YES'</span> <span>:</span> <span>'NO'</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Dynamic response</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/dynamic/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/dynamic/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Dynamic response</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can export a function instead of an object to resolve a dynamic response,
so as to simulate a complex business logic in the real world.</p>
<feature-dynamic />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/dynamic-response
 * @method get
 */</span>
<span>let</span> times <span>=</span> <span>0</span><span>;</span>
module<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>requestInfo</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> <span>{</span> url<span>,</span> query <span>}</span> <span>=</span> requestInfo<span>;</span>
  <span>return</span> <span>{</span> <span>times</span><span>:</span> <span>'times: '</span> <span>+</span> <span>(</span><span>++</span>times<span>)</span><span>,</span> url<span>,</span> query <span>}</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
</div><hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/dynamic-response<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>index</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/dynamic-response?i='</span> <span>+</span> <span>(</span><span>++</span><span>this</span><span>.</span>index<span>)</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div><h2 id="request-information"> Request information</h2>
<div><pre><code><span>export</span> <span>interface</span> <span>RequestInfo</span> <span>{</span>
  <span>url</span><span>:</span> string<span>;</span>
  <span>method</span><span>:</span> HttpVerb<span>;</span>
  <span>query</span><span>:</span> object<span>;</span> <span>// url search query</span>
  headers<span>?</span><span>:</span> object<span>;</span> <span>// request header</span>
  body<span>?</span><span>:</span> any<span>;</span> <span>// post body</span>
<span>}</span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Fake data</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/faker/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/faker/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Fake data</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>http-request-mock</code> has integrated with <a href="https://github.com/ngneat/falso" target="_blank" rel="noopener noreferrer">@ngneat/falso</a>.</p>
<p>You can use it to generate massive amounts of fake data.</p>
<feature-faker />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/faker
 * @method any
 */</span>
<span>const</span> <span>{</span> faker <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>
module<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>)</span><span>,</span>
    <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>
    <span>age</span><span>:</span> <span>10</span> <span>+</span> faker<span>.</span><span>rand</span><span>(</span><span>0</span><span>,</span> <span>90</span><span>)</span><span>,</span>
    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>'(###) ###-####'</span><span>)</span><span>,</span>
    <span>gender</span><span>:</span> faker<span>.</span><span>gender</span><span>(</span><span>)</span><span>,</span>
    <span>avatar</span><span>:</span> faker<span>.</span><span>avatar</span><span>(</span><span>)</span><span>,</span>
  <span>}</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
</div><hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/faker<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>pre</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>pre</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/faker'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>,</span> <span>null</span><span>,</span> <span>4</span><span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Response headers</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/headers/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/headers/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Response headers</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<feature-headers />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/headers
 * @method get
 * @header application: application/json
 * @header abc: 123
 * @header xyz: aaa
 * @header xyz: bbb
 */</span>
module<span>.</span>exports <span>=</span> <span>'response headers mocking'</span><span>;</span>
</code></pre>
</div><hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/headers<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>PHit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/headers'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>headers<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Logs</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/logs/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/logs/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Logs</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="default-logs"> Default logs</h2>
<p>By default, in a non-nodejs-enviroment, <code>http-request-mock</code> will print some necessary
logs if a request is matched with a mock config item. The logs contain request information
, response information and the matched mock item.</p>
<p><img src="/http-request-mock-docs/imgs/logs.png" alt="logs" /></p>
<h2 id="editable"> Editable</h2>
<p>You can even edit the mock config dynamically with this logs.</p>
<p><img src="/http-request-mock-docs/imgs/debug-logs.gif" alt="logs" /></p>
<h2 id="disable"> Disable</h2>
<p>The logs feature can be disabled.</p>
<div><pre><code><span>import</span> HttpRequetMock <span>from</span> <span>'http-request-mock'</span><span>;</span>
HttpRequetMock<span>.</span><span>disableLog</span><span>(</span><span>)</span><span>;</span>
</code></pre>
</div>]]></content:encoded>
      <enclosure url="https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/logs.png" type="image/png"/>
    </item>
    <item>
      <title>Probobuf</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/proto/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/proto/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Probobuf</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="support-for-generating-mock-data-by-proto-files"> Support for generating mock data by proto files.</h2>
<ol>
<li>
<p>When the <code>npx http-request-mock-cli --proto</code> command is executed for
the first time, a <code>.protorc.js</code> configuration file will be generated in
the mock directory.</p>
</li>
<li>
<p>You can set [protoEntry] option in the file below and run the command again.</p>
</li>
<li>
<p>When the <code>npx http-request-mock-cli --proto</code> command is executed for
the second time, the relevant mock files will be generated.</p>
</li>
</ol>
<h2 id="protorc-js-file"> .protorc.js file</h2>
<div><pre><code><span>const</span> faker <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/faker.js'</span><span>)</span><span>.</span>shadow<span>;</span>
<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>overwrite</span><span>:</span> <span>true</span><span>,</span>

  <span>apiPrefix</span><span>:</span> <span>''</span><span>,</span>

  <span>// The proto entry file. Absolute path.</span>
  <span>protoEntry</span><span>:</span> <span>'/some/path/to/your/proto/files.proto'</span><span>,</span>

  <span>// A list of search paths that are absolute for imported .proto files.</span>
  <span>protoPaths</span><span>:</span> <span>[</span><span>]</span><span>,</span>


  <span>// Generate mock files that match specified methods, such as: ['getUser', /^getUser.*/].</span>
  <span>// Note: this option is exclusive with `exclude_methods`.</span>
  <span>includeMethods</span><span>:</span> <span>[</span><span>]</span><span>,</span>

  <span>// Skip methods that match specified items, such as: ['getUser', /^getUser.*/].</span>
  <span>// Note: this option is exclusive with `include_methods`.</span>
  <span>excludeMethods</span><span>:</span> <span>[</span><span>]</span><span>,</span>

  <span>// Whether or not to generate proto request fields, default to false.</span>
  <span>generateProtoRequestFields</span><span>:</span> <span>false</span><span>,</span>

  <span>// The default length of a repeated field</span>
  <span>repeatedLength</span><span>:</span> <span>(</span><span>)</span> <span>=></span> faker<span>.</span><span>rand</span><span>(</span><span>2</span><span>,</span> <span>5</span><span>)</span><span>,</span>

  <span>// Set global default values for specified types</span>
  <span>globalTypes</span><span>:</span> <span>{</span>
    <span>int32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>1</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>int64</span><span>:</span> <span>'faker.integer(1, 10000).toString()'</span><span>,</span>
    <span>string</span><span>:</span> faker<span>.</span><span>string</span><span>(</span><span>5</span><span>,</span> <span>12</span><span>)</span><span>,</span>
    <span>bool</span><span>:</span> faker<span>.</span><span>bool</span><span>(</span><span>)</span><span>,</span>
    <span>double</span><span>:</span> faker<span>.</span><span>float</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>,</span> <span>2</span><span>)</span><span>,</span>
    <span>float</span><span>:</span> faker<span>.</span><span>float</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>,</span> <span>2</span><span>)</span><span>,</span>
    <span>uint32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>uint64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>sint32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>sint64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>fixed32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>fixed64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>sfixed32</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>sfixed64</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>-</span><span>10000</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
    <span>bytes</span><span>:</span> faker<span>.</span><span>bytes</span><span>(</span><span>)</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// Set global default values for specified fields.</span>
  <span>globalFields</span><span>:</span> <span>{</span>
    <span>code</span><span>:</span> <span>0</span><span>,</span>
    <span>msg</span><span>:</span> <span>'ok'</span><span>,</span>
    <span>id</span><span>:</span> <span>(</span><span>messageType</span><span>)</span> <span>=></span> <span>{</span>
      <span>return</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> messageType<span>)</span><span>;</span>
    <span>}</span><span>,</span>
    <span>title</span><span>:</span> faker<span>.</span><span>text</span><span>(</span><span>)</span><span>,</span>
    <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>
    <span>url</span><span>:</span> faker<span>.</span><span>url</span><span>(</span><span>)</span><span>,</span>
    <span>email</span><span>:</span> faker<span>.</span><span>email</span><span>(</span><span>)</span><span>,</span>
    <span>avatar</span><span>:</span> faker<span>.</span><span>avatar</span><span>(</span><span>)</span><span>,</span>
    <span>image</span><span>:</span> faker<span>.</span><span>image</span><span>(</span><span>)</span><span>,</span>
    <span>datetime</span><span>:</span> faker<span>.</span><span>datetime</span><span>(</span><span>)</span><span>,</span>
    <span>ip</span><span>:</span> faker<span>.</span><span>ip</span><span>(</span><span>)</span><span>,</span>
    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>)</span><span>,</span>
    <span>address</span><span>:</span> faker<span>.</span><span>address</span><span>(</span><span>)</span><span>,</span>
    <span>guid</span><span>:</span> faker<span>.</span><span>guid</span><span>(</span><span>)</span><span>,</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
</div><h2 id="proto-file"> Proto file</h2>
<div><pre><code>syntax = &quot;proto3&quot;;
package proto_messages;

message Request {
}

message Record {
  uint32 id    = 1;
  string name  = 2;
  uint32 age   = 3;
  string email = 4;
}

message Result {
  uint32 code = 1;
  string msg  = 2;
  Record data = 3;
}

service Api {
  rpc getResult (Request) returns (Result);
}

</code></pre>
</div><h2 id="mock-data-file-which-is-generated-by-command"> Mock data file which is generated by command</h2>
<div><pre><code><span>/**
 * @url /getResult
 * @delay 10
 * @method any
 */</span>
<span>/* eslint-disable */</span>
<span>const</span> <span>{</span> faker <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/http-request-mock.js'</span><span>)</span><span>;</span>
module<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>request</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>code</span><span>:</span> <span>0</span><span>,</span>
    <span>msg</span><span>:</span> <span>"ok"</span><span>,</span>
    <span>data</span><span>:</span> <span>{</span>
      <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>1</span><span>,</span> <span>"Record"</span><span>)</span><span>,</span>
      <span>name</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>
      <span>age</span><span>:</span> faker<span>.</span><span>integer</span><span>(</span><span>0</span><span>,</span> <span>10000</span><span>)</span><span>,</span>
      <span>email</span><span>:</span> faker<span>.</span><span>email</span><span>(</span><span>)</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Features</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Features</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li><a href="/http-request-mock-docs/feature/static">Static response</a></li>
<li><a href="/http-request-mock-docs/feature/dynamic">Dynamic response</a></li>
<li><a href="/http-request-mock-docs/feature/status">HTTP status</a></li>
<li><a href="/http-request-mock-docs/feature/headers">Response headers</a></li>
<li><a href="/http-request-mock-docs/feature/delay">Delaying response</a></li>
<li><a href="/http-request-mock-docs/feature/times">Limited number</a></li>
<li><a href="/http-request-mock-docs/feature/disable">Disable mocking</a></li>
<li><a href="/http-request-mock-docs/feature/bypass">Bypass mocking</a></li>
<li><a href="/http-request-mock-docs/feature/faker">Fake data</a></li>
<li><a href="/http-request-mock-docs/feature/cross">Cross domain</a></li>
<li><a href="/http-request-mock-docs/feature/logs">Logs</a></li>
<li><a href="/http-request-mock-docs/feature/proto">Proto</a></li>
<li><a href="/http-request-mock-docs/feature/cache">Cache</a></li>
<li><a href="/http-request-mock-docs/feature/remote">Remote mock data</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Remote mock data</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/remote/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/remote/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Remote mock data</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>http-request-mock</code> supports for using remote mock data.</p>
<feature-remote />
<h2 id="mock-data-file"> Mock data file</h2>
<h4 id="support-for-using-remote-mock-data"> Support for using remote mock data.</h4>
<div><pre><code><span>/**
 * @url https://www.api.com/remote1
 *
 * In browser, the specified remote url must conform to the cross-domain specification.
 * @remote https://jsonplaceholder.typicode.com/todos/1
 *
 * You can set request headers for the specified remote request
 * Note: For browser, target server must confirm to Access-Control-Allow-Headers specification
 * @requestHeaders abc: xyz
 *
 * @method get
 */</span>
module<span>.</span><span>exports</span> <span>=</span> <span>remote</span> <span>=></span> remote<span>.</span>responseJson<span>;</span>
</code></pre>
</div><h4 id="you-can-dynamically-modify-the-data-returned-from-the-remote"> You can dynamically modify the data returned from the remote.</h4>
<div><pre><code><span>/**
 * @url https://www.api.com/remote2
 *
 * In browser, the specified remote url must conform to the cross-domain specification.
 * @remote https://jsonplaceholder.typicode.com/todos/1
 *
 * You can set request headers for the specified remote request
 * Note: For browser, target server must confirm to Access-Control-Allow-Headers specification
 * @requestHeaders abc: xyz
 *
 * @method get
 */</span>
module<span>.</span><span>exports</span> <span>=</span> <span>remote</span> <span>=></span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>code</span><span>:</span> <span>0</span><span>,</span>
    <span>msg</span><span>:</span> <span>'OK'</span><span>,</span>
    <span>data</span><span>:</span> remote<span>.</span>responseJson
  <span>}</span>
<span>}</span>
</code></pre>
</div><hr>
<h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>getRemote1<span>"</span></span><span>></span></span>GET https://www.api.com/remote1<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span title="&nbsp;">&amp;nbsp;</span><span title="&nbsp;">&amp;nbsp;</span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>getRemote2<span>"</span></span><span>></span></span>GET https://www.api.com/remote2<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>getRemote1</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/remote1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>

    <span>getRemote2</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>msg <span>=</span> <span>'loading...'</span><span>;</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/remote2'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Static response</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/static/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/static/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Static response</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<feature-static />
<hr>
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/text-response
 * @method get
 */</span>
module<span>.</span>exports <span>=</span> <span>'&lt;html>mock response content&lt;/html>'</span>
</code></pre>
</div><div><pre><code><span>/**
 * @url https://www.api.com/json-response
 * @method post
 */</span>
module<span>.</span>exports <span>=</span> <span>{</span> <span>ret</span><span>:</span> <span>0</span><span>,</span> <span>msg</span><span>:</span> <span>'ok'</span> <span>}</span>
</code></pre>
</div><h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/text-response<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>post<span>"</span></span><span>></span></span>POST https://www.api.com/json-response<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/text-response'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>

    <span>post</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>post</span><span>(</span><span>'https://www.api.com/json-response'</span><span>,</span> <span>{</span><span>abc</span><span>:</span> <span>123</span><span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>HTTP status</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/status/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/status/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">HTTP status</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<feature-status />
<hr>
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://www.api.com/status404
 * @method get
 * @status 404
 */</span>
module<span>.</span>exports <span>=</span> <span>'Not Found'</span>
</code></pre>
</div><h2 id="vue-code"> Vue code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://www.api.com/status404<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/status404'</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span> <span>// Request failed with status code 404</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div><div><p>Note</p>
<p><code>axios</code> will throw an error when meets a 404 response.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Limited number</title>
      <link>https://huturen.github.io/http-request-mock-docs/feature/times/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/feature/times/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Limited number</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="limited-number-of-mocking"> Limited number of mocking</h2>
<div><p>Note</p>
<p>The mock item defined in the mock data file below will be deactivated after <mark>2</mark> requests.</p>
</div>
<feature-times />
<h2 id="mock-data-file"> Mock data file</h2>
<div><pre><code><span>/**
 * @url https://jsonplaceholder.typicode.com/todos/1
 * @method any
 * @times 2
 */</span>
module<span>.</span>exports <span>=</span> <span>{</span> <span>mock</span><span>:</span> <span>'some response data'</span> <span>}</span><span>;</span>
</code></pre>
</div><hr>
<h2 id="business-code"> Business code</h2>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>get<span>"</span></span><span>></span></span>GET https://jsonplaceholder.typicode.com/todos/1<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>Count: {{count}}<span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>reset<span>"</span></span><span>></span></span>Reset<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span><span>,</span> <span>mockItem</span><span>:</span> <span>null</span><span>,</span> <span>count</span><span>:</span> <span>0</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>mounted</span> <span>(</span><span>)</span> <span>{</span>
    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>mockItem <span>=</span> mocker<span>.</span><span>matchMockItem</span><span>(</span><span>'https://jsonplaceholder.typicode.com/todos/1'</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>++</span><span>this</span><span>.</span>count<span>;</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://jsonplaceholder.typicode.com/todos/1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
    <span>reset</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>count <span>=</span> <span>0</span><span>;</span>
      <span>this</span><span>.</span>mockItem<span>.</span>times <span>=</span> <span>2</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Installation</title>
      <link>https://huturen.github.io/http-request-mock-docs/install/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/install/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Installation</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can use <code>http-request-mock</code> to speed up your development and testing.</p>
<p><strong>NPM</strong>:</p>
<p><code>npm install --save-dev http-request-mock</code></p>
<div><pre><code><span>// using ES6 modules</span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>

<span>// using CommonJS modules</span>
<span>const</span> HttpRequestMock <span>=</span> <span>require</span><span>(</span><span>'http-request-mock'</span><span>)</span><span>;</span>
</code></pre>
</div><p><strong>CDN</strong>:</p>
<p>The UMD build is also available on <code>unpkg</code>:</p>
<div><pre><code><span>&lt;!-- unpkg --></span>
<span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>"</span>https://unpkg.com/http-request-mock/http-request-mock.js<span>"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
</div><p>You can find the library on window.HttpRequestMock.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Introduction</title>
      <link>https://huturen.github.io/http-request-mock-docs/intro/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/intro/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Introduction</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>It mocks http requests issued by axios, jquery, superagent, node-fetch, got, (… you name it) by
intercepting XMLHttpRequest, fetch, and nodejs native HTTP/HTTPS module requests at the low level.</p>
<ol>
<li>XMLHttpRequest <span></span></li>
<li>fetch <span></span></li>
<li>https.request, https.get (nodejs native https request) <span></span></li>
<li>http.request, http.get (nodejs native http request) <span></span></li>
<li>wx.request <span></span></li>
</ol>
<p>Because of the low-level interception, any 3th-party request libraries that
based on the above requests can also be supported, such as:</p>
<p><code>axios</code>, <code>jquery</code>, <code>superagent</code>, <code>ky</code>, <code>node-fetch</code>, <code>got</code>, <code>request</code> ...</p>
<p><img src="/http-request-mock-docs/imgs/layers-design.png" alt="layers-design" /></p>
<p>It differs from the other mocking libraries in that it provides a webpack plugin and command line tool
to separate mock data from your business code. It's a truly non-hacking mocking library. You never have
to hack into your business code to mock something ever again after a one-time configuration.</p>
]]></content:encoded>
      <enclosure url="https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/layers-design.png" type="image/png"/>
    </item>
    <item>
      <title>Project home</title>
      <link>https://huturen.github.io/http-request-mock-docs/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Project home</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<hr>
<p>An integration case with vue3:</p>
<p><img src="/http-request-mock-docs/imgs/demonstration.gif" alt="Demonstration" /></p>
<p>Get the <a href="https://github.com/huturen/http-request-mock-simple-case-vue3" target="_blank" rel="noopener noreferrer">source code</a> of the above case.
<a href="/examples/">More integration cases</a>.</p>
<hr>
<p>You can define your mock data like below:</p>
<div><pre><code><span>/**
 * @url https://api.com/xyz
 * @method get
 * @header content-type: application/json
 * @header abc: xyz
 * @status 200
 * @delay 300
 */</span>
<span>const</span> faker <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/faker.js'</span><span>)</span><span>;</span>
module<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>req</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>url</span><span>:</span> req<span>.</span>url<span>,</span>
    <span>id</span><span>:</span> faker<span>.</span><span>incrementId</span><span>(</span><span>)</span><span>,</span>
    <span>enName</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>)</span><span>,</span>
    <span>cnName</span><span>:</span> faker<span>.</span><span>name</span><span>(</span><span>true</span><span>)</span><span>,</span>
    <span>age</span><span>:</span> faker<span>.</span><span>rand</span><span>(</span><span>10</span><span>,</span> <span>40</span><span>)</span><span>,</span>
    <span>phone</span><span>:</span> faker<span>.</span><span>phone</span><span>(</span><span>'(###) ###-####'</span><span>)</span><span>,</span>
   <span>}</span><span>;</span>
<span>}</span>
</code></pre>
</div><home-index />
<p>Try to type the code below in the console to play with http-request-mock.</p>
<div><pre><code>axios<span>.</span><span>get</span><span>(</span><span>'https://api.com/xyz?aaa=1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res<span>.</span>data<span>)</span><span>)</span><span>;</span>

<span>fetch</span><span>(</span><span>'https://api.com/xyz?bbb=1'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> res<span>.</span><span>json</span><span>(</span><span>)</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span><span>;</span>
</code></pre>
</div><hr>
<div><p>Introduction</p>
<p>It mocks http requests issued by axios, jquery, superagent, node-fetch, got, (… you name it) by intercepting XMLHttpRequest, fetch, and nodejs native HTTP/HTTPS module requests at the low level.</p>
</div>
<div>
<p><img src="/http-request-mock-docs/imgs/layers-design.png" alt="Design" /></p>
</div>
<p><em>Note: The demos in this site do not compatible with IE11 and below.</em></p>
]]></content:encoded>
      <enclosure url="https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/demonstration.gif" type="image/gif"/>
    </item>
    <item>
      <title>Bare-bones</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/bare-bones/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/bare-bones/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Bare-bones</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>In a bare-bones example, you just import <code>http-request-mock</code> into
your module entry(such as: src/index.js, components/abc.vue) and configure
your mock datas there. Take a Vue project as an example:</p>
<hr>
<usage-minimum />
<hr>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>demo<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>@click</span><span><span>=</span><span>"</span>getResult<span>"</span></span><span>></span></span>Get https://some.api.com/some-path<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>result<span>"</span></span><span>></span></span> {{ msg }} <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>tips<span>"</span></span><span>></span></span>Hit F12 to access Developer Tools and view the console logs.<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock/http-request-mock.js'</span><span>;</span>
<span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span> <span>msg</span><span>:</span> <span>''</span> <span>}</span>
  <span>}</span><span>,</span>
  <span>mounted</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span>
    mocker<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/some-path'</span><span>,</span> <span>'&lt;div>some result&lt;/div>'</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>getResult</span><span>(</span><span>)</span> <span>{</span>
      axios<span>.</span><span>get</span><span>(</span><span>'https://some.api.com/some-path'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> res<span>.</span>data<span>;</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>err</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>msg <span>=</span> <span>'error: '</span> <span>+</span> err<span>.</span>message<span>;</span>
      <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span> <span>scoped</span> <span>src</span><span><span>=</span><span>"</span>./demo.css<span>"</span></span><span>></span></span>
</code></pre>
</div><p>It may be ok in a small project, however, for a large web application,
it may have lots of APIs to be mocked. You may need frequently change
the entry file when adding/deleting/updating a mock data. There will be
a day that you'll get a mess as the project grows.</p>
]]></content:encoded>
    </item>
    <item>
      <title>CLI</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/cli/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/cli/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">CLI</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="command-line-tool-options"> Command Line Tool Options</h2>
<p><code>npx http-request-mock-cli -h</code>:</p>
<div><pre><code>Usage: npx http-request-mock-cli [options]

Description: http-request-mock command line tool at version 1.6.3.
Glossary: [.runtime.js] A runtime mock configuration entry file.
Example:
    npx http-request-mock-cli -i

Options:
  -d, --directory [directory]        The mock directory relative to the working directory. (default: &quot;mock&quot;)
  -e, --environment [variable-pair]  Enable mock function by environment variable for .runtime.js.
                                     (default: &quot;NODE_ENV=development&quot;)
  -i, --init                         Initialize some samples &amp; a .runtime.js in the mock directory.
  -w, --watch [command]              Watch mock directory &amp; update .runtime.js. If the [command] is specified,
                                     ths specified command will be executed together with watching.
  -j, --inject &lt;app-entry-file&gt;      Inject .runtime.js into the specified entry relative to the working directory.
  -t, --type [module-type]           The module type of .runtime.js.
                                     Possible values are: es6(alias of ESM), cjs(alias of commonjs).
                                     (default: &quot;cjs&quot;)
  --index [index-entry]              Index entry, automatic detection by default.
                                     Possible values are: src/index.js, http-request-mock.js and http-request-mock.esm.mjs.
                                     [src/index.js] for commonJS
                                     [http-request-mock.js] for UMD
                                     [http-request-mock.pure.js] An alternative version without faker and cache plugins for UMD.
                                     [http-request-mock.esm.mjs] for ESM
                                     [http-request-mock.pure.esm.mjs] for ESM An alternative version without faker and cache plugins for ESM.

  -p, --proxy [mode]                 Proxy mode. In proxy mode, http-request-mock will start
                                     a proxy server which receives incoming requests on localhost.
                                     The mock files will be run in a nodejs environment.
                                     This feature is designed for browser, so do not use it in a nodjs project.
                                     Note: proxy mode is still under experimental stage, only for experts.
                                     [matched] All requests matched by @url will be proxied to a proxy server. (default: &quot;none&quot;)
  --proto                            Generate mock files by proto files.
  -h, --help                         output usage information
</code></pre>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Integration</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/integration/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/integration/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Integration</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="integration"> Integration</h2>
<p>For a large web application, we provide a webpack plugin and command
tool to integrate your project. In this way, the mock data file can be
separated from the entry to reduce the burden of managing mock
configuration entry file.</p>
<p><img src="/http-request-mock-docs/imgs/development.png" alt="unit-test" /></p>
<h2 id="integration-by-webpack-plugin"> Integration By Webpack plugin</h2>
<p>You can set it up by the steps below:</p>
<ol>
<li>Run <code>npx http-request-mock-cli -i</code>. It'll initialize some samples in your mock directory.</li>
<li>Configure <code>HttpRequestMockWebpackPlugin</code> in your webpack configurations, which looks like below.</li>
</ol>
<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>
<span>// The webpack plugin will parse mock files under the mock directory and generate a mock</span>
<span>// configuration entry file named `.runtime.js`, then inject it into the your application entry file.</span>
<span>const</span> HttpRequestMockWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'http-request-mock/plugin/webpack.js'</span><span>)</span><span>;</span>
module<span>.</span>exports <span>=</span> <span>{</span>
  <span>// ...</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>new</span> <span>HttpRequestMockWebpackPlugin</span><span>(</span>
      <span>enable</span><span>:</span> process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'development'</span><span>,</span> <span>// activate/deactivate</span>
      <span>entry</span><span>:</span> <span><span>/</span><span>src\/main\.js$</span><span>/</span></span><span>,</span> <span>// web application entry</span>
      <span>dir</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>'mock/'</span><span>)</span><span>,</span> <span>// mock directory</span>
    <span>)</span><span>,</span>
  <span>]</span>
  <span>// ...</span>
<span>}</span><span>;</span>
</code></pre>
</div><ol start="3">
<li>In your package.json, set a command named <code>mock-dev</code> to start a mock development:</li>
</ol>
<div><pre><code>  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"dev"</span><span>:</span> <span>"npm run start"</span><span>,</span>
    <span>"mock-dev"</span><span>:</span> <span>"NODE_ENV=development npm run start"</span>
  <span>}</span><span>,</span>
</code></pre>
</div><p><strong>Webpack Plugin options</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">Option</th>
<th style="text-align:left">Required</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>entry</strong></td>
<td style="text-align:left">yes</td>
<td style="text-align:left">Application entry file, must be a Regexp object</td>
</tr>
<tr>
<td style="text-align:left"><strong>dir</strong></td>
<td style="text-align:left">yes</td>
<td style="text-align:left">Mock directory, must be an absulte path</td>
</tr>
<tr>
<td style="text-align:left"><strong>enable</strong></td>
<td style="text-align:left">no</td>
<td style="text-align:left">Whether or not to enable this plugin, defaut: true</td>
</tr>
<tr>
<td style="text-align:left"><strong>watch</strong></td>
<td style="text-align:left">no</td>
<td style="text-align:left">A callback that is triggered when a mock data file is changed</td>
</tr>
</tbody>
</table>
<h2 id="integration-by-command-line-tool"> Integration By Command Line Tool</h2>
<p>An alternative way to integrate with your project is using CLI.
You can set it up by the steps below:</p>
<ol>
<li>Run <code>npx http-request-mock-cli -j src/xxx.js</code> to inject mock configuration file
into the specified entry which may look like below:</li>
</ol>
<div><pre><code><span>import</span> <span>'../mock/.runtime.js'</span>
<span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>'vue'</span>
<span>import</span> App <span>from</span> <span>'./App.vue'</span>
<span>// ...</span>
<span>createApp</span><span>(</span>App<span>)</span><span>.</span><span>mount</span><span>(</span><span>'#app'</span><span>)</span>
</code></pre>
</div><ol start="2">
<li>In your package.json, set a command named <code>mock-dev</code> to start a mock development:</li>
</ol>
<div><pre><code><span>"scripts"</span><span>:</span> <span>{</span>
  <span>"serve"</span><span>:</span> <span>"vue-cli-service serve"</span><span>,</span>
  <span>"mock-dev"</span><span>:</span> <span>"http-request-mock-cli -w \"vue-cli-service serve\""</span><span>,</span>
<span>}</span><span>,</span>
</code></pre>
</div><p>The command passed into <code>http-request-mock-cli -w</code> must be quoted with double quotes.</p>
<p><em><strong>Note：</strong></em></p>
<p>If <code>-e --enviroment</code> is not specified, mock function will be enabled by <code>NODE_ENV=development</code>.</p>
<p>Or, you can specify another enviroment variable, such as: <code>-e MOCK=yes</code>.</p>
]]></content:encoded>
      <enclosure url="https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/development.png" type="image/png"/>
    </item>
    <item>
      <title>Mock data file</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/mock/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/mock/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Mock data file</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>You can define your mock data file like below:</p>
<div><pre><code><span>/**
 * Note: Only the first comments block will be parsed.
 *
 * The url to be mocked.
 * Both string and RegExp(which begins and ends with # or /) are supported.
 * RegExp example: #.*\/getUserInfo.*#
 * @url https://jsonplaceholder.typicode.com/todos/1
 *
 * The request method to be mocked.
 * One of http verb method get, post, put, patch, delete, head.
 * Default: any
 * @method any
 *
 * Response http status to be mocked.
 * Default: 200
 * @status 200
 *
 * Request headers, only available for @remote tag
 * It can be set repeatedly.
 * @requestHeaders content-type: application/json
 *
 * Response http headers to be mocked.
 * It can be set repeatedly.
 * @headers content-type: application/json
 *
 * Simulate network latency in milliseconds.
 * Default: 0
 * @delay 100
 *
 * Limited number of mocking.
 * It'll do a real network request after specified number of mocking.
 * Default: Infinity
 * @times 5
 *
 * Whether or not to enable this mock item.
 * 'yes' for real network request, 'no' for mock request.
 * Default: no
 * @disable no
 *
 * Remote mock data.
 * In browser, the specified remote url must conform to the cross-domain specification.
 * @remote https://remote.api.com/some/mock/data
 */</span>
<span>// Response body to be mocked.</span>
<span>// It supports to export an object, function, async function, sting or any other types.</span>
<span>// If a function is specified, the function accepts an argument with request information.</span>
module<span>.</span><span>exports</span> <span>=</span> <span>(</span><span>requestInfo</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>'Your response data'</span><span>;</span>
<span>}</span><span>;</span>
</code></pre>
</div><p>At tags(@url, @method, @status ...) in the comments above will be parsed by webpack plugin or cli.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Usage</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Usage</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li><a href="/http-request-mock-docs/usage/start">Start</a></li>
<li><a href="/http-request-mock-docs/usage/minimum">Bare-bones</a></li>
<li><a href="/http-request-mock-docs/usage/cli">CLI</a></li>
<li><a href="/http-request-mock-docs/usage/webpack">Webpack</a></li>
<li><a href="/http-request-mock-docs/usage/interceptor">Interceptor</a></li>
<li><a href="/http-request-mock-docs/usage/test">Unit test</a></li>
<li><a href="/http-request-mock-docs/usage/mock">Mock data file</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Start</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/start/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/start/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Start</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>To mock an http request, just call a <code>mock</code> method or http verb method(<code>get</code>,<code>post</code>,<code>put</code>,<code>patch</code>,<code>delete</code>).</p>
<div><pre><code><span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>
<span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setup</span><span>(</span><span>)</span><span>;</span>

mocker<span>.</span><span>mock</span><span>(</span><span>{</span>
  <span>url</span><span>:</span> <span>'https://www.api.com/some-api'</span> <span>// or RegExp: /.*\/some-api$/</span>
  <span>body</span><span>:</span> <span>'some response data'</span>
<span>}</span><span>)</span><span>;</span>

<span>// or using http verb method:</span>
mocker<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/some-api'</span><span>,</span> <span>'some response data'</span><span>)</span><span>;</span>
</code></pre>
</div><p>Then, you can write your business code as normal:</p>
<div><pre><code>axios<span>.</span><span>get</span><span>(</span><span>'https://www.api.com/some-api'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>res<span>.</span>data<span>)</span><span>;</span> <span>// some response data</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
</div><hr>
]]></content:encoded>
    </item>
    <item>
      <title>Unit test</title>
      <link>https://huturen.github.io/http-request-mock-docs/usage/test/</link>
      <guid>https://huturen.github.io/http-request-mock-docs/usage/test/</guid>
      <source url="https://huturen.github.io/http-request-mock-docs/rss.xml">Unit test</source>
      <pubDate>Sun, 12 Feb 2023 07:43:04 GMT</pubDate>
      <content:encoded><![CDATA[<p>This library comes with built-in unit test capability and can be used in jest and mocha envrioment.
The unit tests of this library are also based on itself.</p>
<p>An example of jest：</p>
<div><pre><code><span>import</span> axios <span>from</span> <span>'axios'</span><span>;</span>
<span>import</span> xhrAdapter <span>from</span> <span>'axios/lib/adapters/xhr'</span><span>;</span>
<span>import</span> HttpRequestMock <span>from</span> <span>'http-request-mock'</span><span>;</span>

axios<span>.</span>defaults<span>.</span>adapter <span>=</span> xhrAdapter<span>;</span>
<span>const</span> mocker <span>=</span> HttpRequestMock<span>.</span><span>setupForUnitTest</span><span>(</span><span>'xhr'</span><span>)</span><span>;</span>

mocker<span>.</span><span>get</span><span>(</span><span>'https://your.api.com/path'</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span> <span>abc</span><span>:</span> <span>123</span> <span>}</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>it</span><span>(</span><span>'should match object`'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> axios<span>.</span><span>get</span><span>(</span><span>'https://your.api.com/path'</span><span>)</span><span>;</span>
  <span>expect</span><span>(</span>res<span>.</span>data<span>)</span><span>.</span><span>toMatchObject</span><span>(</span><span>{</span><span>abc</span><span>:</span> <span>123</span><span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
</div><p>For a <code>mocha</code> example, please refer to <a href="https://github.com/huturen/http-request-mock/blob/main/experiment/mocha.js" target="_blank" rel="noopener noreferrer">experiment/mocha.js</a>.</p>
<h2 id="design"> Design</h2>
<p><img src="/http-request-mock-docs/imgs/unittest.png" alt="unit-test" /></p>
]]></content:encoded>
      <enclosure url="https://huturen.github.io/http-request-mock-docs/http-request-mock-docs/imgs/unittest.png" type="image/png"/>
    </item>
  </channel>
</rss>